{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/emailService.ts":{"content":"import nodemailer from 'nodemailer';\n\nif (!process.env.GMAIL_USER || !process.env.GMAIL_PASS) {\n  console.warn(\"Gmail credentials not set. Email notifications will be disabled.\");\n}\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: process.env.GMAIL_USER,\n    pass: process.env.GMAIL_PASS,\n  },\n});\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport class EmailService {\n  private static instance: EmailService;\n  \n  public static getInstance(): EmailService {\n    if (!EmailService.instance) {\n      EmailService.instance = new EmailService();\n    }\n    return EmailService.instance;\n  }\n\n  async sendEmail(params: EmailParams): Promise<boolean> {\n    if (!process.env.GMAIL_USER || !process.env.GMAIL_PASS) {\n      console.warn(\"Gmail service not configured. Skipping email:\", params.subject);\n      return false;\n    }\n\n    try {\n      await transporter.sendMail({\n        to: params.to,\n        from: params.from || process.env.GMAIL_USER || 'noreply@clinic.com',\n        subject: params.subject,\n        text: params.text || '',\n        html: params.html || '',\n      });\n      console.log(`Email sent successfully to ${params.to}: ${params.subject}`);\n      return true;\n    } catch (error) {\n      console.error('Gmail SMTP email error:', error);\n      return false;\n    }\n  }\n\n  async sendPatientNotification(\n    doctorEmail: string,\n    patientName: string,\n    action: 'added' | 'updated',\n    viewLink: string\n  ): Promise<boolean> {\n    const subject = `Patient ${action === 'added' ? 'Added' : 'Updated'}: ${patientName}`;\n    const html = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #3B82F6;\">My Clinic Portal Notification</h2>\n        <p>Hello Doctor,</p>\n        <p>Patient <strong>${patientName}</strong> has been ${action} in the clinic portal.</p>\n        <p>\n          <a href=\"${viewLink}\" \n             style=\"background-color: #3B82F6; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\n            View Patient Details\n          </a>\n        </p>\n        <p>Best regards,<br>My Clinic Portal Team</p>\n      </div>\n    `;\n\n    return await this.sendEmail({\n      to: doctorEmail,\n      from: process.env.GMAIL_USER || 'noreply@clinic.com',\n      subject,\n      html,\n    });\n  }\n}\n\nexport const emailService = EmailService.getInstance();\n","size_bytes":2467},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8408},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { ObjectPermission } from \"./objectAcl\";\nimport { emailService } from \"./emailService\";\nimport { insertPatientSchema, insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\ninterface AuthenticatedRequest extends Request {\n  user?: {\n    claims?: {\n      sub: string;\n      email?: string;\n    };\n  };\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      if (!userId) {\n        return res.status(401).json({ message: \"User ID not found\" });\n      }\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Object storage routes for file serving\n  app.get(\"/objects/:objectPath(*)\", isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    const userId = req.user?.claims?.sub;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: userId,\n        requestedPermission: ObjectPermission.READ,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Get upload URL for files\n  app.post(\"/api/objects/upload\", isAuthenticated, async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error generating upload URL:\", error);\n      res.status(500).json({ message: \"Failed to generate upload URL\" });\n    }\n  });\n\n  // User Management Routes\n  app.get('/api/users', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post('/api/users', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const createdBy = req.user?.claims?.sub;\n      const ipAddress = req.ip;\n\n      const user = await storage.createUser({\n        ...userData,\n        createdBy,\n        updatedBy: createdBy,\n        ipAddress,\n      });\n\n      res.status(201).json(user);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.put('/api/users/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const updatedBy = req.user?.claims?.sub;\n      const ipAddress = req.ip;\n\n      const user = await storage.updateUser(id, {\n        ...updates,\n        updatedBy,\n        ipAddress,\n      });\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Patient Management Routes\n  app.get('/api/patients', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { specialty, search } = req.query;\n      let patients;\n\n      if (search) {\n        patients = await storage.searchPatients(search as string);\n      } else if (specialty) {\n        patients = await storage.getPatientsBySpecialty(specialty as string);\n      } else {\n        patients = await storage.getAllPatients();\n      }\n\n      res.json(patients);\n    } catch (error) {\n      console.error(\"Error fetching patients:\", error);\n      res.status(500).json({ message: \"Failed to fetch patients\" });\n    }\n  });\n\n  app.get('/api/patients/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const patient = await storage.getPatient(id);\n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      res.json(patient);\n    } catch (error) {\n      console.error(\"Error fetching patient:\", error);\n      res.status(500).json({ message: \"Failed to fetch patient\" });\n    }\n  });\n\n  app.post('/api/patients', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const patientData = insertPatientSchema.parse(req.body);\n      const createdBy = req.user?.claims?.sub;\n      const ipAddress = req.ip;\n\n      const patient = await storage.createPatient({\n        ...patientData,\n        doctorId: createdBy,\n        createdBy,\n        updatedBy: createdBy,\n        ipAddress,\n      });\n\n      // Send email notification to doctor\n      const user = await storage.getUser(createdBy!);\n      if (user?.email && user.emailNotifications) {\n        const viewLink = `${req.protocol}://${req.get('host')}/patients/${patient.id}`;\n        await emailService.sendPatientNotification(\n          user.email,\n          patient.name,\n          'added',\n          viewLink\n        );\n      }\n\n      // Create notification\n      await storage.createNotification({\n        userId: createdBy!,\n        type: 'patient_added',\n        title: 'New Patient Added',\n        message: `Patient ${patient.name} has been added to your list`,\n        relatedId: patient.id,\n        createdBy,\n        ipAddress,\n      });\n\n      res.status(201).json(patient);\n    } catch (error) {\n      console.error(\"Error creating patient:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create patient\" });\n    }\n  });\n\n  app.put('/api/patients/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const updatedBy = req.user?.claims?.sub;\n      const ipAddress = req.ip;\n\n      const patient = await storage.updatePatient(id, {\n        ...updates,\n        updatedBy,\n        ipAddress,\n      });\n\n      // Send email notification\n      const user = await storage.getUser(updatedBy!);\n      if (user?.email && user.emailNotifications) {\n        const viewLink = `${req.protocol}://${req.get('host')}/patients/${patient.id}`;\n        await emailService.sendPatientNotification(\n          user.email,\n          patient.name,\n          'updated',\n          viewLink\n        );\n      }\n\n      // Create notification\n      await storage.createNotification({\n        userId: updatedBy!,\n        type: 'patient_updated',\n        title: 'Patient Updated',\n        message: `Patient ${patient.name} information has been updated`,\n        relatedId: patient.id,\n        createdBy: updatedBy,\n        ipAddress,\n      });\n\n      res.json(patient);\n    } catch (error) {\n      console.error(\"Error updating patient:\", error);\n      res.status(500).json({ message: \"Failed to update patient\" });\n    }\n  });\n\n  app.delete('/api/patients/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deletePatient(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting patient:\", error);\n      res.status(500).json({ message: \"Failed to delete patient\" });\n    }\n  });\n\n  // Patient Files Routes\n  app.get('/api/patients/:id/files', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const files = await storage.getPatientFiles(id);\n      res.json(files);\n    } catch (error) {\n      console.error(\"Error fetching patient files:\", error);\n      res.status(500).json({ message: \"Failed to fetch patient files\" });\n    }\n  });\n\n  app.put('/api/patient-files', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { patientId, fileName, fileURL } = req.body;\n      const uploadedBy = req.user?.claims?.sub;\n      const ipAddress = req.ip;\n\n      if (!patientId || !fileName || !fileURL) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        fileURL,\n        {\n          owner: uploadedBy!,\n          visibility: \"private\",\n        }\n      );\n\n      const file = await storage.createPatientFile({\n        patientId,\n        fileName,\n        filePath: objectPath,\n        fileType: fileName.split('.').pop() || 'unknown',\n        uploadedBy,\n        createdBy: uploadedBy,\n        updatedBy: uploadedBy,\n        ipAddress,\n      });\n\n      res.status(201).json({ file, objectPath });\n    } catch (error) {\n      console.error(\"Error creating patient file:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Dashboard Analytics Routes\n  app.get('/api/analytics/patient-count-by-specialty', isAuthenticated, async (req, res) => {\n    try {\n      const data = await storage.getPatientCountBySpecialty();\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error fetching patient count by specialty:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics data\" });\n    }\n  });\n\n  app.get('/api/analytics/dashboard-stats', isAuthenticated, async (req, res) => {\n    try {\n      const totalPatients = (await storage.getAllPatients()).length;\n      const todayPatients = await storage.getTodayPatientCount();\n      const pendingReports = await storage.getPendingReportsCount();\n\n      res.json({\n        totalPatients,\n        todayPatients,\n        pendingReports,\n        appointments: 12, // This would come from an appointments table\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get('/api/analytics/recent-activity', isAuthenticated, async (req, res) => {\n    try {\n      const activity = await storage.getRecentActivity();\n      res.json(activity);\n    } catch (error) {\n      console.error(\"Error fetching recent activity:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent activity\" });\n    }\n  });\n\n  // Notifications Routes\n  app.get('/api/notifications', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      const notifications = await storage.getUserNotifications(userId!);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.put('/api/notifications/:id/read', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.markNotificationAsRead(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12201},"server/storage.ts":{"content":"import {\n  users,\n  patients,\n  patientFiles,\n  userPermissions,\n  notifications,\n  patientArchive,\n  type User,\n  type UpsertUser,\n  type Patient,\n  type InsertPatient,\n  type PatientFile,\n  type InsertPatientFile,\n  type UserPermission,\n  type InsertUserPermission,\n  type Notification,\n  type InsertNotification,\n  type PatientArchive,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, like, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Additional user operations\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: any): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  \n  // Patient operations\n  getPatient(id: string): Promise<Patient | undefined>;\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  updatePatient(id: string, updates: Partial<Patient>): Promise<Patient>;\n  deletePatient(id: string): Promise<void>;\n  hardDeletePatient(id: string): Promise<void>;\n  getAllPatients(): Promise<Patient[]>;\n  getPatientsBySpecialty(specialty: string): Promise<Patient[]>;\n  getPatientsByDoctor(doctorId: string): Promise<Patient[]>;\n  searchPatients(query: string): Promise<Patient[]>;\n  \n  // Patient files operations\n  createPatientFile(file: InsertPatientFile): Promise<PatientFile>;\n  getPatientFiles(patientId: string): Promise<PatientFile[]>;\n  deletePatientFile(id: string): Promise<void>;\n  \n  // User permissions operations\n  createUserPermission(permission: InsertUserPermission): Promise<UserPermission>;\n  getUserPermissions(userId: string): Promise<UserPermission[]>;\n  deleteUserPermissions(userId: string): Promise<void>;\n  \n  // Notifications operations\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getUserNotifications(userId: string): Promise<Notification[]>;\n  markNotificationAsRead(id: string): Promise<void>;\n  \n  // Archive operations\n  archivePatient(patientId: string, archivedBy: string): Promise<PatientArchive>;\n  \n  // Analytics operations\n  getPatientCountBySpecialty(): Promise<Array<{ specialty: string; count: number }>>;\n  getTodayPatientCount(): Promise<number>;\n  getPendingReportsCount(): Promise<number>;\n  getRecentActivity(): Promise<Array<{ type: string; message: string; createdAt: Date }>>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Additional user operations\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(userData: any): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  // Patient operations\n  async getPatient(id: string): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.id, id));\n    return patient;\n  }\n\n  async createPatient(patientData: InsertPatient): Promise<Patient> {\n    const [patient] = await db\n      .insert(patients)\n      .values({\n        ...patientData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return patient;\n  }\n\n  async updatePatient(id: string, updates: Partial<Patient>): Promise<Patient> {\n    const [patient] = await db\n      .update(patients)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(patients.id, id))\n      .returning();\n    return patient;\n  }\n\n  async deletePatient(id: string): Promise<void> {\n    // Soft delete - set isActive to false instead of hard delete\n    await db\n      .update(patients)\n      .set({ \n        isActive: false,\n        updatedAt: new Date()\n      })\n      .where(eq(patients.id, id));\n  }\n  \n  async hardDeletePatient(id: string): Promise<void> {\n    // Hard delete - actually removes the record\n    await db.delete(patients).where(eq(patients.id, id));\n  }\n\n  async getAllPatients(): Promise<Patient[]> {\n    return await db.select().from(patients).orderBy(desc(patients.createdAt));\n  }\n\n  async getPatientsBySpecialty(specialty: string): Promise<Patient[]> {\n    return await db\n      .select()\n      .from(patients)\n      .where(eq(patients.specialty, specialty as any))\n      .orderBy(desc(patients.createdAt));\n  }\n\n  async getPatientsByDoctor(doctorId: string): Promise<Patient[]> {\n    return await db\n      .select()\n      .from(patients)\n      .where(eq(patients.doctorId, doctorId))\n      .orderBy(desc(patients.createdAt));\n  }\n\n  async searchPatients(query: string): Promise<Patient[]> {\n    return await db\n      .select()\n      .from(patients)\n      .where(like(patients.name, `%${query}%`))\n      .orderBy(desc(patients.createdAt));\n  }\n\n  // Patient files operations\n  async createPatientFile(fileData: InsertPatientFile): Promise<PatientFile> {\n    const [file] = await db\n      .insert(patientFiles)\n      .values({\n        ...fileData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return file;\n  }\n\n  async getPatientFiles(patientId: string): Promise<PatientFile[]> {\n    return await db\n      .select()\n      .from(patientFiles)\n      .where(eq(patientFiles.patientId, patientId))\n      .orderBy(desc(patientFiles.createdAt));\n  }\n\n  async deletePatientFile(id: string): Promise<void> {\n    await db.delete(patientFiles).where(eq(patientFiles.id, id));\n  }\n\n  // User permissions operations\n  async createUserPermission(permissionData: InsertUserPermission): Promise<UserPermission> {\n    const [permission] = await db\n      .insert(userPermissions)\n      .values({\n        ...permissionData,\n        createdAt: new Date(),\n      })\n      .returning();\n    return permission;\n  }\n\n  async getUserPermissions(userId: string): Promise<UserPermission[]> {\n    return await db\n      .select()\n      .from(userPermissions)\n      .where(eq(userPermissions.userId, userId));\n  }\n\n  async deleteUserPermissions(userId: string): Promise<void> {\n    await db.delete(userPermissions).where(eq(userPermissions.userId, userId));\n  }\n\n  // Notifications operations\n  async createNotification(notificationData: InsertNotification): Promise<Notification> {\n    const [notification] = await db\n      .insert(notifications)\n      .values({\n        ...notificationData,\n        createdAt: new Date(),\n      })\n      .returning();\n    return notification;\n  }\n\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, id));\n  }\n\n  // Archive operations\n  async archivePatient(patientId: string, archivedBy: string): Promise<PatientArchive> {\n    const patient = await this.getPatient(patientId);\n    if (!patient) {\n      throw new Error(\"Patient not found\");\n    }\n\n    const [archived] = await db\n      .insert(patientArchive)\n      .values({\n        originalPatientId: patientId,\n        patientData: patient as any,\n        archivedAt: new Date(),\n        archivedBy,\n        archiveReason: \"Periodic archive\",\n      })\n      .returning();\n\n    await this.hardDeletePatient(patientId);\n    return archived;\n  }\n\n  // Analytics operations\n  async getPatientCountBySpecialty(): Promise<Array<{ specialty: string; count: number }>> {\n    const results = await db\n      .select({\n        specialty: patients.specialty,\n        count: sql<number>`count(*)::int`,\n      })\n      .from(patients)\n      .groupBy(patients.specialty);\n    \n    return results.map(r => ({ specialty: r.specialty!, count: r.count }));\n  }\n\n  async getTodayPatientCount(): Promise<number> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    const [result] = await db\n      .select({ count: sql<number>`count(*)::int` })\n      .from(patients)\n      .where(and(\n        sql`${patients.createdAt} >= ${today}`,\n        sql`${patients.createdAt} < ${tomorrow}`\n      ));\n    \n    return result.count;\n  }\n\n  async getPendingReportsCount(): Promise<number> {\n    // This would be based on some status field in a reports table\n    // For now, return a placeholder\n    return 7;\n  }\n\n  async getRecentActivity(): Promise<Array<{ type: string; message: string; createdAt: Date }>> {\n    const recentPatients = await db\n      .select({\n        type: sql<string>`'patient_added'`,\n        message: sql<string>`'New patient ' || ${patients.name} || ' added'`,\n        createdAt: patients.createdAt,\n      })\n      .from(patients)\n      .orderBy(desc(patients.createdAt))\n      .limit(10);\n    \n    return recentPatients.map(r => ({\n      type: r.type,\n      message: r.message,\n      createdAt: r.createdAt!,\n    }));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10168},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgEnum,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  boolean,\n  integer,\n  uuid,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const roleEnum = pgEnum(\"role\", [\"super_admin\", \"admin\", \"user\"]);\nexport const specialtyEnum = pgEnum(\"specialty\", [\"radiology\", \"pediatric\", \"gynac\", \"medicines\", \"surgeon\"]);\nexport const genderEnum = pgEnum(\"gender\", [\"male\", \"female\", \"other\"]);\nexport const permissionEnum = pgEnum(\"permission\", [\"add\", \"edit\", \"delete\", \"view\"]);\n\n// Session storage table (Required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (Required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  username: varchar(\"username\").unique(),\n  phone: varchar(\"phone\"),\n  address: text(\"address\"),\n  role: roleEnum(\"role\").default(\"user\"),\n  specialty: specialtyEnum(\"specialty\"),\n  isActive: boolean(\"is_active\").default(true),\n  emailNotifications: boolean(\"email_notifications\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  createdBy: varchar(\"created_by\"),\n  updatedBy: varchar(\"updated_by\"),\n  ipAddress: varchar(\"ip_address\"),\n});\n\n// Patients table\nexport const patients = pgTable(\"patients\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\").notNull(),\n  address: text(\"address\"),\n  dateOfBirth: timestamp(\"date_of_birth\").notNull(),\n  gender: genderEnum(\"gender\").notNull(),\n  specialty: specialtyEnum(\"specialty\").notNull(),\n  chiefComplaint: text(\"chief_complaint\"),\n  medicalHistory: text(\"medical_history\"),\n  doctorId: varchar(\"doctor_id\").references(() => users.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  createdBy: varchar(\"created_by\"),\n  updatedBy: varchar(\"updated_by\"),\n  ipAddress: varchar(\"ip_address\"),\n});\n\n// Patient Files table\nexport const patientFiles = pgTable(\"patient_files\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: uuid(\"patient_id\").references(() => patients.id).notNull(),\n  fileName: varchar(\"file_name\").notNull(),\n  filePath: varchar(\"file_path\").notNull(),\n  fileType: varchar(\"file_type\").notNull(),\n  fileSize: integer(\"file_size\"),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  createdBy: varchar(\"created_by\"),\n  updatedBy: varchar(\"updated_by\"),\n  ipAddress: varchar(\"ip_address\"),\n});\n\n// User Permissions table\nexport const userPermissions = pgTable(\"user_permissions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  resource: varchar(\"resource\").notNull(), // patients, users, reports, etc.\n  permission: permissionEnum(\"permission\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  createdBy: varchar(\"created_by\"),\n  ipAddress: varchar(\"ip_address\"),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  type: varchar(\"type\").notNull(), // patient_added, patient_updated, etc.\n  title: varchar(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  relatedId: varchar(\"related_id\"), // patient_id, user_id, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  createdBy: varchar(\"created_by\"),\n  ipAddress: varchar(\"ip_address\"),\n});\n\n// Patient Archive table (for configurable archival)\nexport const patientArchive = pgTable(\"patient_archive\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  originalPatientId: uuid(\"original_patient_id\").notNull(),\n  patientData: jsonb(\"patient_data\").notNull(),\n  archivedAt: timestamp(\"archived_at\").defaultNow(),\n  archivedBy: varchar(\"archived_by\"),\n  archiveReason: varchar(\"archive_reason\"),\n  ipAddress: varchar(\"ip_address\"),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  patients: many(patients),\n  patientFiles: many(patientFiles),\n  permissions: many(userPermissions),\n  notifications: many(notifications),\n}));\n\nexport const patientsRelations = relations(patients, ({ one, many }) => ({\n  doctor: one(users, {\n    fields: [patients.doctorId],\n    references: [users.id],\n  }),\n  files: many(patientFiles),\n}));\n\nexport const patientFilesRelations = relations(patientFiles, ({ one }) => ({\n  patient: one(patients, {\n    fields: [patientFiles.patientId],\n    references: [patients.id],\n  }),\n  uploadedByUser: one(users, {\n    fields: [patientFiles.uploadedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const userPermissionsRelations = relations(userPermissions, ({ one }) => ({\n  user: one(users, {\n    fields: [userPermissions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  dateOfBirth: z.union([\n    z.date(),\n    z.string().transform((str) => new Date(str))\n  ])\n});\n\nexport const insertPatientFileSchema = createInsertSchema(patientFiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserPermissionSchema = createInsertSchema(userPermissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\n\nexport type PatientFile = typeof patientFiles.$inferSelect;\nexport type InsertPatientFile = z.infer<typeof insertPatientFileSchema>;\n\nexport type UserPermission = typeof userPermissions.$inferSelect;\nexport type InsertUserPermission = z.infer<typeof insertUserPermissionSchema>;\n\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n\nexport type PatientArchive = typeof patientArchive.$inferSelect;\n","size_bytes":7308},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/Landing\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport PatientManagement from \"@/pages/PatientManagement\";\nimport AddPatient from \"@/pages/AddPatient\";\nimport PatientDetails from \"@/pages/PatientDetails\";\nimport UserManagement from \"@/pages/UserManagement\";\nimport Analytics from \"@/pages/Analytics\";\nimport Reports from \"@/pages/Reports\";\nimport Settings from \"@/pages/Settings\";\nimport Notifications from \"@/pages/Notifications\";\nimport NotFound from \"@/pages/not-found\";\nimport Sidebar, { SidebarProvider, useSidebar } from \"@/components/Sidebar\";\nimport Header from \"@/components/Header\";\n\nfunction AuthenticatedLayout() {\n  const { isCollapsed } = useSidebar();\n  \n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Sidebar />\n      <div className={`min-h-screen transition-all duration-300 ${isCollapsed ? 'ml-16' : 'ml-64'}`}>\n        <Header />\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/patients\" component={PatientManagement} />\n          <Route path=\"/patients/:id\" component={PatientDetails} />\n          <Route path=\"/add-patient\" component={AddPatient} />\n          <Route path=\"/users\" component={UserManagement} />\n          <Route path=\"/analytics\" component={Analytics} />\n          <Route path=\"/reports\" component={Reports} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/notifications\" component={Notifications} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <AuthenticatedLayout />\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <SidebarProvider>\n          <Toaster />\n          <Router />\n        </SidebarProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2660},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(142.1, 76.2%, 36.3%);\n  --accent-foreground: hsl(355.7, 100%, 97.3%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --radius: 0.5rem;\n  --font-sans: Inter, ui-sans-serif, system-ui, sans-serif;\n  --font-serif: ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif;\n  --font-mono: ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(142.1, 76.2%, 36.3%);\n  --accent-foreground: hsl(355.7, 100%, 97.3%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n}\n\n/* Specialty gradient backgrounds matching the design */\n.specialty-radiology {\n  background: linear-gradient(135deg, hsl(253, 59%, 71%) 0%, hsl(259, 37%, 56%) 100%);\n}\n\n.specialty-pediatric {\n  background: linear-gradient(135deg, hsl(314, 89%, 81%) 0%, hsl(355, 76%, 63%) 100%);\n}\n\n.specialty-gynac {\n  background: linear-gradient(135deg, hsl(205, 98%, 66%) 0%, hsl(180, 100%, 50%) 100%);\n}\n\n.specialty-medicines {\n  background: linear-gradient(135deg, hsl(147, 84%, 67%) 0%, hsl(167, 85%, 59%) 100%);\n}\n\n.specialty-surgeon {\n  background: linear-gradient(135deg, hsl(332, 96%, 82%) 0%, hsl(54, 93%, 63%) 100%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-medium;\n  }\n}\n\n@layer utilities {\n  .notification-badge {\n    @apply absolute -top-1 -right-1 bg-destructive text-destructive-foreground rounded-full w-5 h-5 text-xs flex items-center justify-center;\n  }\n}\n","size_bytes":3344},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AnalyticsCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\n\ninterface AnalyticsCardProps {\n  title: string;\n  value: number | string;\n  subtitle?: string;\n  icon: string;\n  color: string;\n}\n\nexport default function AnalyticsCard({ title, value, subtitle, icon, color }: AnalyticsCardProps) {\n  const getColorClasses = () => {\n    const colors = {\n      primary: \"bg-primary text-primary-foreground\",\n      \"chart-1\": \"bg-chart-1 text-white\",\n      \"chart-2\": \"bg-chart-2 text-white\", \n      \"chart-3\": \"bg-chart-3 text-white\",\n      \"chart-4\": \"bg-chart-4 text-white\",\n      \"chart-5\": \"bg-chart-5 text-white\",\n    };\n    return colors[color as keyof typeof colors] || \"bg-primary text-primary-foreground\";\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">{title}</p>\n            <p className=\"text-3xl font-bold text-foreground\" data-testid={`analytics-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n              {value}\n            </p>\n            {subtitle && (\n              <p className=\"text-sm text-accent\">{subtitle}</p>\n            )}\n          </div>\n          <div className={`w-12 h-12 rounded-full flex items-center justify-center ${getColorClasses()}`}>\n            <i className={`fas ${icon}`}></i>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1435},"client/src/components/Header.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotificationDropdown from \"@/components/NotificationDropdown\";\n\nconst pageTitles: Record<string, { title: string; subtitle: string }> = {\n  \"/\": { title: \"Dashboard\", subtitle: \"Welcome back\" },\n  \"/patients\": { title: \"Patient Management\", subtitle: \"Manage all patient records\" },\n  \"/add-patient\": { title: \"Add New Patient\", subtitle: \"Enter patient information\" },\n  \"/reports\": { title: \"Medical Reports\", subtitle: \"View and generate reports\" },\n  \"/analytics\": { title: \"Analytics\", subtitle: \"Detailed insights and metrics\" },\n  \"/users\": { title: \"User Management\", subtitle: \"Manage user accounts and roles\" },\n  \"/settings\": { title: \"Settings\", subtitle: \"Account and system preferences\" },\n  \"/notifications\": { title: \"Notifications\", subtitle: \"Stay updated with clinic activities\" },\n};\n\nexport default function Header() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  const pageInfo = pageTitles[location] || { title: \"Dashboard\", subtitle: \"Welcome back\" };\n  \n  const getDisplayName = () => {\n    if (user && typeof user === 'object' && ('firstName' in user || 'lastName' in user)) {\n      const firstName = (user as any).firstName || '';\n      const lastName = (user as any).lastName || '';\n      return `${firstName} ${lastName}`.trim();\n    }\n    return (user as any)?.email || 'User';\n  };\n\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  const currentTime = new Date().toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  });\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\">{pageInfo.title}</h1>\n          <p className=\"text-sm text-muted-foreground\">\n            {pageInfo.subtitle}, {getDisplayName()}\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <NotificationDropdown />\n          \n          <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n            <i className=\"fas fa-calendar\"></i>\n            <span data-testid=\"current-date\">{currentDate}</span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n            <i className=\"fas fa-clock\"></i>\n            <span data-testid=\"current-time\">{currentTime}</span>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2656},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/css/style.min.css\";\nimport \"@uppy/dashboard/css/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName} data-testid=\"button-object-uploader\">\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":2902},"client/src/components/PatientCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PatientCardProps {\n  patient: {\n    id: string;\n    name: string;\n    email?: string;\n    phone: string;\n    address?: string;\n    dateOfBirth: string;\n    gender: string;\n    specialty: string;\n    isActive: boolean;\n    createdAt: string;\n    updatedAt: string;\n  };\n}\n\nexport default function PatientCard({ patient }: PatientCardProps) {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: patientFiles } = useQuery({\n    queryKey: [\"/api/patients\", patient.id, \"files\"],\n  });\n\n  const deletePatientMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", `/api/patients/${patient.id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      toast({\n        title: \"Success\",\n        description: \"Patient deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete patient\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getAge = () => {\n    const birthDate = new Date(patient.dateOfBirth);\n    const today = new Date();\n    const age = today.getFullYear() - birthDate.getFullYear();\n    const monthDiff = today.getMonth() - birthDate.getMonth();\n    \n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n      return age - 1;\n    }\n    return age;\n  };\n\n  const getInitials = () => {\n    return patient.name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getSpecialtyColor = () => {\n    const colors = {\n      radiology: \"bg-primary text-primary-foreground\",\n      pediatric: \"bg-chart-1 text-white\",\n      gynac: \"bg-chart-2 text-white\", \n      medicines: \"bg-chart-3 text-white\",\n      surgeon: \"bg-chart-4 text-white\",\n    };\n    return colors[patient.specialty as keyof typeof colors] || \"bg-muted text-muted-foreground\";\n  };\n\n  const handleViewPatient = () => {\n    // This would navigate to patient details page\n    console.log(\"View patient:\", patient.id);\n  };\n\n  const handleEditPatient = () => {\n    // This would open edit patient modal\n    console.log(\"Edit patient:\", patient.id);\n  };\n\n  const handleDeletePatient = () => {\n    if (window.confirm(`Are you sure you want to delete ${patient.name}?`)) {\n      deletePatientMutation.mutate();\n    }\n  };\n\n  const handleCardClick = () => {\n    setLocation(`/patients/${patient.id}`);\n  };\n\n  const handleViewFiles = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setLocation(`/patients/${patient.id}`);\n  };\n\n  return (\n    <Card \n      className=\"hover:shadow-lg transition-shadow cursor-pointer\" \n      data-testid={`patient-card-${patient.id}`}\n      onClick={handleCardClick}\n    >\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-sm font-medium text-primary-foreground\">\n                {getInitials()}\n              </span>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-foreground\" data-testid={`patient-name-${patient.id}`}>\n                {patient.name}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {patient.gender}, {getAge()} years\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={handleViewPatient}\n              data-testid={`button-view-patient-${patient.id}`}\n            >\n              <i className=\"fas fa-eye\"></i>\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={handleEditPatient}\n              data-testid={`button-edit-patient-${patient.id}`}\n            >\n              <i className=\"fas fa-edit\"></i>\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={handleDeletePatient}\n              className=\"text-muted-foreground hover:text-destructive\"\n              data-testid={`button-delete-patient-${patient.id}`}\n            >\n              <i className=\"fas fa-trash\"></i>\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"space-y-2 mb-4\">\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <i className=\"fas fa-phone text-muted-foreground\"></i>\n            <span className=\"text-foreground\">{patient.phone}</span>\n          </div>\n          {patient.email && (\n            <div className=\"flex items-center space-x-2 text-sm\">\n              <i className=\"fas fa-envelope text-muted-foreground\"></i>\n              <span className=\"text-foreground\">{patient.email}</span>\n            </div>\n          )}\n          {patient.address && (\n            <div className=\"flex items-center space-x-2 text-sm\">\n              <i className=\"fas fa-map-marker-alt text-muted-foreground\"></i>\n              <span className=\"text-foreground\">{patient.address}</span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium capitalize ${getSpecialtyColor()}`}>\n            {patient.specialty}\n          </span>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-xs text-muted-foreground\">Last visit:</span>\n            <span className=\"text-xs text-foreground\">\n              {new Date(patient.updatedAt).toLocaleDateString()}\n            </span>\n          </div>\n        </div>\n        \n        {/* Files indicator */}\n        <div className=\"mt-4 pt-4 border-t border-border\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center space-x-1\">\n              <i className=\"fas fa-paperclip text-muted-foreground\"></i>\n              <span className=\"text-muted-foreground\">\n                {Array.isArray(patientFiles) ? patientFiles.length : 0} files attached\n              </span>\n            </div>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"text-primary hover:text-primary/80 text-xs\"\n              data-testid={`button-view-files-${patient.id}`}\n              onClick={handleViewFiles}\n            >\n              View Details\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7100},"client/src/components/Sidebar.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState, createContext, useContext, ReactNode } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, Menu } from \"lucide-react\";\n\nconst navigationItems = [\n  { path: \"/\", label: \"Dashboard\", icon: \"fa-chart-pie\" },\n  { path: \"/patients\", label: \"Patients\", icon: \"fa-users\" },\n  { path: \"/add-patient\", label: \"Add Patient\", icon: \"fa-user-plus\" },\n  { path: \"/notifications\", label: \"Notifications\", icon: \"fa-bell\" },\n  { path: \"/reports\", label: \"Medical Reports\", icon: \"fa-file-medical\" },\n  { path: \"/analytics\", label: \"Analytics\", icon: \"fa-chart-bar\" },\n  { path: \"/users\", label: \"User Management\", icon: \"fa-user-cog\" },\n  { path: \"/settings\", label: \"Settings\", icon: \"fa-cog\" },\n];\n\n// Create sidebar context\ninterface SidebarContextType {\n  isCollapsed: boolean;\n  toggleSidebar: () => void;\n}\n\nconst SidebarContext = createContext<SidebarContextType | undefined>(undefined);\n\nexport function SidebarProvider({ children }: { children: ReactNode }) {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const toggleSidebar = () => {\n    setIsCollapsed(prev => !prev);\n  };\n\n  return (\n    <SidebarContext.Provider value={{ isCollapsed, toggleSidebar }}>\n      {children}\n    </SidebarContext.Provider>\n  );\n}\n\nexport function useSidebar() {\n  const context = useContext(SidebarContext);\n  if (context === undefined) {\n    throw new Error('useSidebar must be used within a SidebarProvider');\n  }\n  return context;\n}\n\nexport default function Sidebar() {\n  const [location, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { isCollapsed, toggleSidebar } = useSidebar();\n\n  const { data: notifications } = useQuery({\n    queryKey: [\"/api/notifications\"],\n  });\n\n  const unreadNotifications = notifications?.filter((n: any) => !n.isRead)?.length || 0;\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const getDisplayName = () => {\n    if (user?.firstName || user?.lastName) {\n      return `${user.firstName || ''} ${user.lastName || ''}`.trim();\n    }\n    return user?.email || 'User';\n  };\n\n  const getRoleDisplay = () => {\n    const role = user?.role?.replace('_', ' ') || 'User';\n    const specialty = user?.specialty;\n    return specialty ? `${role} - ${specialty}` : role;\n  };\n\n  const getUserInitials = () => {\n    if (user?.firstName || user?.lastName) {\n      return `${user.firstName?.[0] || ''}${user.lastName?.[0] || ''}`;\n    }\n    return user?.email?.[0]?.toUpperCase() || 'U';\n  };\n\n  return (\n    <div className={`fixed left-0 top-0 h-full bg-card border-r border-border transition-all duration-300 ${isCollapsed ? 'w-16' : 'w-64'}`}>\n      <div className={`border-b border-border transition-all duration-300 ${isCollapsed ? 'p-4' : 'p-6'}`}>\n        <div className=\"flex items-center justify-between\">\n          <div className={`flex items-center ${isCollapsed ? 'justify-center' : 'space-x-3'}`}>\n            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n              <i className=\"fas fa-hospital-alt text-primary-foreground\"></i>\n            </div>\n            {!isCollapsed && (\n              <div>\n                <h2 className=\"font-semibold text-foreground\">My Clinic Portal</h2>\n                <p className=\"text-sm text-muted-foreground capitalize\">{getRoleDisplay()}</p>\n              </div>\n            )}\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleSidebar}\n            className={`transition-transform duration-300 ${isCollapsed ? 'rotate-180' : ''}`}\n            data-testid=\"button-toggle-sidebar\"\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n      \n      <nav className=\"p-4 space-y-2\">\n        {navigationItems.map((item) => {\n          const isActive = location === item.path;\n          const showNotificationBadge = item.path === \"/notifications\" && unreadNotifications > 0;\n          \n          return (\n            <button\n              key={item.path}\n              onClick={() => setLocation(item.path)}\n              className={`w-full flex items-center rounded-md transition-colors relative ${\n                isCollapsed \n                  ? 'px-3 py-3 justify-center' \n                  : 'space-x-3 px-4 py-3'\n              } ${\n                isActive\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"hover:bg-muted text-foreground\"\n              }`}\n              data-testid={`nav-${item.path.replace(\"/\", \"\") || \"dashboard\"}`}\n              title={isCollapsed ? item.label : undefined}\n            >\n              <i className={`fas ${item.icon}`}></i>\n              {!isCollapsed && <span>{item.label}</span>}\n              {showNotificationBadge && (\n                <div className=\"absolute top-1 right-1 bg-destructive text-destructive-foreground rounded-full w-5 h-5 text-xs flex items-center justify-center\">\n                  {unreadNotifications}\n                </div>\n              )}\n            </button>\n          );\n        })}\n      </nav>\n      \n      <div className={`absolute bottom-4 transition-all duration-300 ${isCollapsed ? 'left-2 right-2' : 'left-4 right-4'}`}>\n        <div className={`flex items-center bg-muted rounded-md p-3 ${isCollapsed ? 'flex-col space-y-2' : 'space-x-3'}`}>\n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n            <span className=\"text-xs font-medium text-primary-foreground\">{getUserInitials()}</span>\n          </div>\n          {!isCollapsed && (\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-foreground\">{getDisplayName()}</p>\n              <p className=\"text-xs text-muted-foreground\">Online</p>\n            </div>\n          )}\n          <button \n            onClick={handleLogout}\n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-logout\"\n            title={isCollapsed ? 'Logout' : undefined}\n          >\n            <i className=\"fas fa-sign-out-alt\"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6316},"client/src/components/UserForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\n\nconst formSchema = insertUserSchema.extend({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n});\n\ninterface UserFormProps {\n  user?: any;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport default function UserForm({ user, onSuccess, onCancel }: UserFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!user;\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: user?.username || \"\",\n      email: user?.email || \"\",\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      phone: user?.phone || \"\",\n      address: user?.address || \"\",\n      role: user?.role || \"user\",\n      specialty: user?.specialty || undefined,\n      isActive: user?.isActive ?? true,\n      emailNotifications: user?.emailNotifications ?? true,\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof formSchema>) => {\n      const url = isEditing ? `/api/users/${user.id}` : \"/api/users\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n      const response = await apiRequest(method, url, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: `User ${isEditing ? 'updated' : 'created'} successfully!`,\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      console.error(\"Error saving user:\", error);\n      toast({\n        title: \"Error\",\n        description: `Failed to ${isEditing ? 'update' : 'create'} user. Please try again.`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    createUserMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"username\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Username *</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"Enter username\"\n                    data-testid=\"input-username\"\n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email Address</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"email\"\n                    placeholder=\"user@example.com\"\n                    data-testid=\"input-email\"\n                    {...field}\n                    value={field.value ?? \"\"} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"firstName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>First Name</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"First name\"\n                    data-testid=\"input-first-name\"\n                    {...field}\n                    value={field.value ?? \"\"} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"lastName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Last Name</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"Last name\"\n                    data-testid=\"input-last-name\"\n                    {...field}\n                    value={field.value ?? \"\"} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"phone\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Phone Number</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"+1 (555) 123-4567\"\n                    data-testid=\"input-phone\"\n                    {...field}\n                    value={field.value ?? \"\"} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"role\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Role *</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value ?? undefined}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-role\">\n                      <SelectValue placeholder=\"Select role\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"user\">Doctor/User</SelectItem>\n                    <SelectItem value=\"admin\">Admin</SelectItem>\n                    <SelectItem value=\"super_admin\">Super Admin</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"specialty\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Specialty</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value ?? undefined}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-specialty\">\n                      <SelectValue placeholder=\"Select specialty (if doctor)\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"radiology\">Radiology</SelectItem>\n                    <SelectItem value=\"pediatric\">Pediatric</SelectItem>\n                    <SelectItem value=\"gynac\">Gynecology</SelectItem>\n                    <SelectItem value=\"medicines\">General Medicine</SelectItem>\n                    <SelectItem value=\"surgeon\">Surgery</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"address\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Address</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Complete address\"\n                  data-testid=\"textarea-address\"\n                  {...field}\n                  value={field.value ?? \"\"} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center space-x-2\">\n            <FormField\n              control={form.control}\n              name=\"isActive\"\n              render={({ field }) => (\n                <FormItem className=\"flex items-center space-x-2\">\n                  <FormControl>\n                    <Switch\n                      checked={field.value ?? false}\n                      onCheckedChange={field.onChange}\n                      data-testid=\"switch-is-active\"\n                    />\n                  </FormControl>\n                  <FormLabel>Active Account</FormLabel>\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <FormField\n              control={form.control}\n              name=\"emailNotifications\"\n              render={({ field }) => (\n                <FormItem className=\"flex items-center space-x-2\">\n                  <FormControl>\n                    <Switch\n                      checked={field.value ?? false}\n                      onCheckedChange={field.onChange}\n                      data-testid=\"switch-email-notifications\"\n                    />\n                  </FormControl>\n                  <FormLabel>Email Notifications</FormLabel>\n                </FormItem>\n              )}\n            />\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-end space-x-4\">\n          <Button \n            type=\"button\" \n            variant=\"outline\"\n            onClick={onCancel}\n            data-testid=\"button-cancel\"\n          >\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\"\n            disabled={createUserMutation.isPending}\n            data-testid=\"button-save-user\"\n          >\n            {createUserMutation.isPending ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                {isEditing ? 'Updating...' : 'Creating...'}\n              </>\n            ) : (\n              isEditing ? 'Update User' : 'Create User'\n            )}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":10288},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AddPatient.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { insertPatientSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { z } from \"zod\";\n\nconst formSchema = insertPatientSchema.extend({\n  dateOfBirth: z.string().min(1, \"Date of birth is required\"),\n});\n\nexport default function AddPatient() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [uploadedFiles, setUploadedFiles] = useState<string[]>([]);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      dateOfBirth: \"\",\n      gender: undefined,\n      specialty: undefined,\n      chiefComplaint: \"\",\n      medicalHistory: \"\",\n    },\n  });\n\n  const createPatientMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof formSchema>) => {\n      const patientData = {\n        ...data,\n        dateOfBirth: new Date(data.dateOfBirth),\n      };\n      const response = await apiRequest(\"POST\", \"/api/patients\", patientData);\n      return response.json();\n    },\n    onSuccess: async (patient) => {\n      // Upload files if any\n      for (const fileURL of uploadedFiles) {\n        const fileName = fileURL.split('/').pop() || 'upload';\n        await apiRequest(\"PUT\", \"/api/patient-files\", {\n          patientId: patient.id,\n          fileName,\n          fileURL,\n        });\n      }\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      toast({\n        title: \"Success\",\n        description: \"Patient added successfully!\",\n      });\n      setLocation(\"/patients\");\n    },\n    onError: (error) => {\n      console.error(\"Error creating patient:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add patient. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGetUploadParameters = async () => {\n    const response = await apiRequest(\"POST\", \"/api/objects/upload\", {});\n    const data = await response.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleUploadComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful) {\n      const newFileURLs = result.successful.map(file => file.uploadURL).filter((url): url is string => url !== undefined);\n      setUploadedFiles(prev => [...prev, ...newFileURLs]);\n    }\n  };\n\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    createPatientMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"p-6\" data-testid=\"add-patient-view\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-6\">\n          <h2 className=\"text-2xl font-bold text-foreground\">Add New Patient</h2>\n          <p className=\"text-muted-foreground\">Enter patient information and upload medical files</p>\n        </div>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n            {/* Personal Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Personal Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Full Name *</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter patient's full name\" \n                            data-testid=\"input-patient-name\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"dateOfBirth\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Date of Birth *</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"date\" \n                            data-testid=\"input-patient-dob\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"gender\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Gender *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-patient-gender\">\n                              <SelectValue placeholder=\"Select Gender\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"male\">Male</SelectItem>\n                            <SelectItem value=\"female\">Female</SelectItem>\n                            <SelectItem value=\"other\">Other</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number *</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"+1 (555) 123-4567\" \n                            data-testid=\"input-patient-phone\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email Address</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"email\" \n                            placeholder=\"patient@email.com\"\n                            data-testid=\"input-patient-email\"\n                            {...field}\n                            value={field.value ?? \"\"} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"specialty\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Specialty *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-patient-specialty\">\n                              <SelectValue placeholder=\"Select Specialty\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"radiology\">Radiology</SelectItem>\n                            <SelectItem value=\"pediatric\">Pediatric</SelectItem>\n                            <SelectItem value=\"gynac\">Gynecology</SelectItem>\n                            <SelectItem value=\"medicines\">General Medicine</SelectItem>\n                            <SelectItem value=\"surgeon\">Surgery</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <div className=\"mt-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"address\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Address</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Enter complete address\"\n                            data-testid=\"textarea-patient-address\"\n                            {...field}\n                            value={field.value ?? \"\"} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Medical History */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Medical History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"chiefComplaint\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Chief Complaint</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Describe the patient's main concern or symptoms\"\n                            data-testid=\"textarea-chief-complaint\"\n                            {...field}\n                            value={field.value ?? \"\"} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"medicalHistory\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Medical History</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Previous medical conditions, surgeries, medications, allergies\"\n                            rows={4}\n                            data-testid=\"textarea-medical-history\"\n                            {...field}\n                            value={field.value ?? \"\"} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* File Upload Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Medical Files & Reports</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary transition-colors\">\n                  <div className=\"mb-4\">\n                    <i className=\"fas fa-cloud-upload-alt text-4xl text-muted-foreground\"></i>\n                  </div>\n                  <h4 className=\"text-lg font-medium text-foreground mb-2\">Upload Medical Files</h4>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Upload scan images, reports, and other medical documents\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mb-4\">\n                    Supported formats: JPEG, PNG, PDF, DICOM (Max 10MB per file)\n                  </p>\n                  \n                  <ObjectUploader\n                    maxNumberOfFiles={10}\n                    maxFileSize={10485760}\n                    onGetUploadParameters={handleGetUploadParameters}\n                    onComplete={handleUploadComplete}\n                    buttonClassName=\"bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90\"\n                  >\n                    <i className=\"fas fa-upload mr-2\"></i>\n                    Choose Files\n                  </ObjectUploader>\n                </div>\n                \n                {uploadedFiles.length > 0 && (\n                  <div className=\"mt-4 space-y-2\">\n                    <h5 className=\"text-sm font-medium text-foreground\">Uploaded Files:</h5>\n                    <div className=\"space-y-1\">\n                      {uploadedFiles.map((fileURL, index) => (\n                        <div key={index} className=\"text-sm text-muted-foreground\">\n                          <i className=\"fas fa-file mr-2\"></i>\n                          File {index + 1} uploaded successfully\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n            \n            {/* Form Actions */}\n            <div className=\"flex items-center justify-end space-x-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\"\n                onClick={() => setLocation(\"/patients\")}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\"\n                disabled={createPatientMutation.isPending}\n                data-testid=\"button-add-patient-submit\"\n              >\n                {createPatientMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Adding Patient...\n                  </>\n                ) : (\n                  \"Add Patient\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15238},"client/src/pages/Analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport AnalyticsCard from \"@/components/AnalyticsCard\";\nimport { useState } from \"react\";\n\nexport default function Analytics() {\n  const [timeRange, setTimeRange] = useState(\"all\");\n  const [specialty, setSpecialty] = useState(\"all\");\n\n  const { data: dashboardStats } = useQuery({\n    queryKey: [\"/api/analytics/dashboard-stats\"],\n  });\n\n  const { data: specialtyData } = useQuery({\n    queryKey: [\"/api/analytics/patient-count-by-specialty\"],\n  });\n\n  const specialtyColors = {\n    radiology: \"specialty-radiology\",\n    pediatric: \"specialty-pediatric\", \n    gynac: \"specialty-gynac\",\n    medicines: \"specialty-medicines\",\n    surgeon: \"specialty-surgeon\"\n  };\n\n  const specialtyIcons = {\n    radiology: \"fa-x-ray\",\n    pediatric: \"fa-baby\",\n    gynac: \"fa-female\",\n    medicines: \"fa-pills\",\n    surgeon: \"fa-scalpel\"\n  };\n\n  return (\n    <div className=\"p-6\" data-testid=\"analytics-view\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-foreground\">Analytics Dashboard</h2>\n        <p className=\"text-muted-foreground\">Detailed insights and analytics for your clinic</p>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">Time Range</label>\n              <Select value={timeRange} onValueChange={setTimeRange}>\n                <SelectTrigger data-testid=\"select-time-range\">\n                  <SelectValue placeholder=\"Select time range\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"today\">Today</SelectItem>\n                  <SelectItem value=\"yesterday\">Yesterday</SelectItem>\n                  <SelectItem value=\"week\">This Week</SelectItem>\n                  <SelectItem value=\"month\">This Month</SelectItem>\n                  <SelectItem value=\"6months\">6 Months</SelectItem>\n                  <SelectItem value=\"year\">This Year</SelectItem>\n                  <SelectItem value=\"all\">All Time</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">Specialty</label>\n              <Select value={specialty} onValueChange={setSpecialty}>\n                <SelectTrigger data-testid=\"select-specialty-filter\">\n                  <SelectValue placeholder=\"Select specialty\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Specialties</SelectItem>\n                  <SelectItem value=\"radiology\">Radiology</SelectItem>\n                  <SelectItem value=\"pediatric\">Pediatric</SelectItem>\n                  <SelectItem value=\"gynac\">Gynecology</SelectItem>\n                  <SelectItem value=\"medicines\">General Medicine</SelectItem>\n                  <SelectItem value=\"surgeon\">Surgery</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">Medical Abbreviations</label>\n              <Select>\n                <SelectTrigger data-testid=\"select-medical-abbreviation\">\n                  <SelectValue placeholder=\"Filter by abbreviation\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"mr\">MR - Magnetic Resonance</SelectItem>\n                  <SelectItem value=\"cr\">CR - Computed Radiography</SelectItem>\n                  <SelectItem value=\"us\">US - Ultrasound</SelectItem>\n                  <SelectItem value=\"dx\">DX - Diagnosis</SelectItem>\n                  <SelectItem value=\"nm\">NM - Nuclear Medicine</SelectItem>\n                  <SelectItem value=\"pt\">PT - Physical Therapy</SelectItem>\n                  <SelectItem value=\"px\">PX - Physical Examination</SelectItem>\n                  <SelectItem value=\"mg\">MG - Mammography</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <AnalyticsCard\n          title=\"Total Patients\"\n          value={dashboardStats?.totalPatients || 0}\n          subtitle={`${timeRange === 'all' ? 'All time' : 'Current period'}`}\n          icon=\"fa-users\"\n          color=\"primary\"\n        />\n        \n        <AnalyticsCard\n          title=\"New Patients\"\n          value={dashboardStats?.todayPatients || 0}\n          subtitle={`${timeRange === 'today' ? 'Today' : 'This period'}`}\n          icon=\"fa-user-plus\"\n          color=\"chart-1\"\n        />\n        \n        <AnalyticsCard\n          title=\"Pending Reports\"\n          value={dashboardStats?.pendingReports || 0}\n          subtitle=\"Awaiting review\"\n          icon=\"fa-file-medical\"\n          color=\"chart-2\"\n        />\n        \n        <AnalyticsCard\n          title=\"Appointments\"\n          value={dashboardStats?.appointments || 0}\n          subtitle=\"Scheduled\"\n          icon=\"fa-calendar-check\"\n          color=\"chart-4\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Patient Distribution by Specialty */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Patient Distribution by Specialty</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {specialtyData?.map((item: any) => (\n                <div \n                  key={item.specialty}\n                  className={`flex items-center justify-between p-3 rounded-md ${specialtyColors[item.specialty as keyof typeof specialtyColors]} text-white`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <i className={`fas ${specialtyIcons[item.specialty as keyof typeof specialtyIcons]}`}></i>\n                    <span className=\"font-medium capitalize\">{item.specialty}</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-bold\">{item.count}</div>\n                    <div className=\"text-xs opacity-90\">\n                      {specialtyData && ((item.count / specialtyData.reduce((sum: number, s: any) => sum + s.count, 0)) * 100).toFixed(1)}%\n                    </div>\n                  </div>\n                </div>\n              )) || (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <i className=\"fas fa-chart-pie text-4xl mb-4 opacity-50\"></i>\n                  <p>No specialty data available</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Performance Metrics */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Performance Metrics</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-foreground\">Patient Satisfaction</span>\n                  <span className=\"text-sm text-muted-foreground\">95%</span>\n                </div>\n                <div className=\"w-full bg-muted rounded-full h-2\">\n                  <div className=\"bg-accent h-2 rounded-full\" style={{ width: '95%' }}></div>\n                </div>\n              </div>\n\n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-foreground\">Average Wait Time</span>\n                  <span className=\"text-sm text-muted-foreground\">12 min</span>\n                </div>\n                <div className=\"w-full bg-muted rounded-full h-2\">\n                  <div className=\"bg-primary h-2 rounded-full\" style={{ width: '75%' }}></div>\n                </div>\n              </div>\n\n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-foreground\">Report Completion Rate</span>\n                  <span className=\"text-sm text-muted-foreground\">88%</span>\n                </div>\n                <div className=\"w-full bg-muted rounded-full h-2\">\n                  <div className=\"bg-chart-1 h-2 rounded-full\" style={{ width: '88%' }}></div>\n                </div>\n              </div>\n\n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-foreground\">System Uptime</span>\n                  <span className=\"text-sm text-muted-foreground\">99.9%</span>\n                </div>\n                <div className=\"w-full bg-muted rounded-full h-2\">\n                  <div className=\"bg-chart-2 h-2 rounded-full\" style={{ width: '100%' }}></div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9387},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport AnalyticsCard from \"@/components/AnalyticsCard\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n\n  const { data: dashboardStats } = useQuery({\n    queryKey: [\"/api/analytics/dashboard-stats\"],\n  });\n\n  const { data: specialtyData } = useQuery({\n    queryKey: [\"/api/analytics/patient-count-by-specialty\"],\n  });\n\n  const { data: recentActivity } = useQuery({\n    queryKey: [\"/api/analytics/recent-activity\"],\n  });\n\n  const { data: recentPatients } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const specialtyColors = {\n    radiology: \"specialty-radiology\",\n    pediatric: \"specialty-pediatric\", \n    gynac: \"specialty-gynac\",\n    medicines: \"specialty-medicines\",\n    surgeon: \"specialty-surgeon\"\n  };\n\n  const specialtyIcons = {\n    radiology: \"fa-x-ray\",\n    pediatric: \"fa-baby\",\n    gynac: \"fa-female\",\n    medicines: \"fa-pills\",\n    surgeon: \"fa-scalpel\"\n  };\n\n  return (\n    <div className=\"p-6\" data-testid=\"dashboard-view\">\n      {/* Analytics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <AnalyticsCard\n          title=\"Total Patients\"\n          value={(dashboardStats as any)?.totalPatients || 0}\n          subtitle=\"+12 this week\"\n          icon=\"fa-users\"\n          color=\"primary\"\n        />\n        \n        <AnalyticsCard\n          title=\"Today's Patients\"\n          value={(dashboardStats as any)?.todayPatients || 0}\n          subtitle=\"+3 from yesterday\"\n          icon=\"fa-calendar-day\"\n          color=\"chart-1\"\n        />\n        \n        <AnalyticsCard\n          title=\"Pending Reports\"\n          value={(dashboardStats as any)?.pendingReports || 0}\n          subtitle=\"2 urgent\"\n          icon=\"fa-file-medical\"\n          color=\"chart-2\"\n        />\n        \n        <AnalyticsCard\n          title=\"Appointments\"\n          value={(dashboardStats as any)?.appointments || 0}\n          subtitle=\"Next: 3:00 PM\"\n          icon=\"fa-clock\"\n          color=\"chart-4\"\n        />\n      </div>\n      \n      {/* Specialty Analytics and Recent Activity */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Patient Distribution by Specialty</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {Array.isArray(specialtyData) && specialtyData.map((item: any) => (\n                <div \n                  key={item.specialty}\n                  className={`flex items-center justify-between p-3 rounded-md ${specialtyColors[item.specialty as keyof typeof specialtyColors]} text-white`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <i className={`fas ${specialtyIcons[item.specialty as keyof typeof specialtyIcons]}`}></i>\n                    <span className=\"font-medium capitalize\">{item.specialty}</span>\n                  </div>\n                  <span className=\"font-bold\">{item.count} patients</span>\n                </div>\n              )) || (\n                <div className=\"text-center py-4 text-muted-foreground\">\n                  No patient data available\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {Array.isArray(recentActivity) && recentActivity.slice(0, 5).map((activity: any, index: number) => (\n                <div key={index} className=\"flex items-start space-x-3 p-3 hover:bg-muted rounded-md\">\n                  <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                    <i className=\"fas fa-user-plus text-xs text-primary-foreground\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm text-foreground\">{activity.message}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {new Date(activity.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n              )) || (\n                <div className=\"text-center py-4 text-muted-foreground\">\n                  No recent activity\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Recent Patients Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Recent Patients</CardTitle>\n            <a href=\"/patients\" className=\"text-primary hover:text-primary/80 text-sm font-medium\">\n              View All Patients\n            </a>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {Array.isArray(recentPatients) && recentPatients.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted\">\n                  <tr>\n                    <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Patient</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Age</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Specialty</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Last Visit</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {(recentPatients as any[]).slice(0, 5).map((patient: any) => {\n                    const age = new Date().getFullYear() - new Date(patient.dateOfBirth).getFullYear();\n                    const initials = patient.name.split(' ').map((n: string) => n[0]).join('');\n                    \n                    return (\n                      <tr key={patient.id} className=\"border-b border-border hover:bg-muted/50\">\n                        <td className=\"p-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                              <span className=\"text-xs font-medium text-primary-foreground\">{initials}</span>\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-foreground\">{patient.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">{patient.email}</p>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"p-4 text-sm text-foreground\">{age}</td>\n                        <td className=\"p-4\">\n                          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-primary text-primary-foreground capitalize\">\n                            {patient.specialty}\n                          </span>\n                        </td>\n                        <td className=\"p-4 text-sm text-muted-foreground\">\n                          {new Date(patient.updatedAt).toLocaleDateString()}\n                        </td>\n                        <td className=\"p-4\">\n                          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-accent text-accent-foreground\">\n                            {patient.isActive ? 'Active' : 'Inactive'}\n                          </span>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <i className=\"fas fa-users text-4xl mb-4 opacity-50\"></i>\n              <p>No patients found</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8330},"client/src/pages/Landing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary to-accent flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md shadow-2xl\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-20 h-20 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-hospital-alt text-3xl text-primary-foreground\"></i>\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground\">My Clinic Portal</h1>\n            <p className=\"text-muted-foreground mt-2\">Healthcare Management System</p>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <p className=\"text-center text-sm text-muted-foreground\">\n              Secure access to your clinic management system\n            </p>\n            \n            <Button \n              onClick={handleLogin}\n              className=\"w-full py-3 text-lg\"\n              data-testid=\"button-login\"\n            >\n              Sign In with Replit\n            </Button>\n          </div>\n          \n          <div className=\"mt-8 text-center\">\n            <div className=\"grid grid-cols-3 gap-4 text-xs text-muted-foreground\">\n              <div>\n                <i className=\"fas fa-user-md block mb-1\"></i>\n                <span>Doctors</span>\n              </div>\n              <div>\n                <i className=\"fas fa-users block mb-1\"></i>\n                <span>Patients</span>\n              </div>\n              <div>\n                <i className=\"fas fa-chart-bar block mb-1\"></i>\n                <span>Analytics</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1979},"client/src/pages/PatientManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueries } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { useLocation } from \"wouter\";\nimport { \n  Plus, \n  Eye, \n  Edit, \n  Trash2, \n  FileText, \n  Calendar,\n  User,\n  Phone,\n  Mail,\n  MapPin,\n  Download,\n  Search,\n  Filter,\n  RefreshCw,\n  MonitorPlay\n} from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function PatientManagement() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedSpecialty, setSelectedSpecialty] = useState(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const [selectedPatients, setSelectedPatients] = useState<string[]>([]);\n  const { toast } = useToast();\n\n  // Delete patient mutation\n  const deletePatientMutation = useMutation({\n    mutationFn: async (patientId: string) => {\n      await apiRequest(\"DELETE\", `/api/patients/${patientId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      toast({\n        title: \"Success\",\n        description: \"Patient deactivated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to deactivate patient\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk delete mutation\n  const bulkDeleteMutation = useMutation({\n    mutationFn: async (patientIds: string[]) => {\n      await Promise.all(\n        patientIds.map(id => apiRequest(\"DELETE\", `/api/patients/${id}`, {}))\n      );\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      toast({\n        title: \"Success\",\n        description: `${selectedPatients.length} patients deactivated successfully`,\n      });\n      setSelectedPatients([]);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to deactivate patients\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const { data: patients, isLoading } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Fetch file counts for each patient using useQueries to avoid hooks violation\n  const fileQueries = useQueries({\n    queries: Array.isArray(patients) ? patients.map((patient: any) => ({\n      queryKey: [\"/api/patients\", patient.id, \"files\"],\n      enabled: !!patient.id,\n    })) : []\n  });\n\n  const patientsWithFiles = Array.isArray(patients) ? patients.map((patient: any, index: number) => {\n    const files = fileQueries[index]?.data || [];\n    return { \n      ...patient, \n      files: Array.isArray(files) ? files : [],\n      fileCount: Array.isArray(files) ? files.length : 0\n    };\n  }) : [];\n\n  const filteredPatients = patientsWithFiles?.filter((patient: any) => {\n    // Search filter\n    if (searchQuery) {\n      const searchLower = searchQuery.toLowerCase();\n      const matchesName = patient.name?.toLowerCase().includes(searchLower);\n      const matchesPhone = patient.phone?.toLowerCase().includes(searchLower);\n      const matchesEmail = patient.email?.toLowerCase().includes(searchLower);\n      const matchesId = patient.id?.toLowerCase().includes(searchLower);\n      if (!matchesName && !matchesPhone && !matchesEmail && !matchesId) return false;\n    }\n    \n    // Specialty filter\n    if (selectedSpecialty && selectedSpecialty !== \"all\") {\n      if (patient.specialty !== selectedSpecialty) return false;\n    }\n    \n    // Status filter\n    if (selectedStatus && selectedStatus !== \"all\") {\n      const isActive = selectedStatus === \"active\";\n      if (patient.isActive !== isActive) return false;\n    }\n    \n    // Date filter\n    if (selectedDate) {\n      const patientDate = new Date(patient.createdAt).toDateString();\n      const filterDate = new Date(selectedDate).toDateString();\n      if (patientDate !== filterDate) return false;\n    }\n    \n    return true;\n  });\n\n  const getAge = (dateOfBirth: string) => {\n    const birthDate = new Date(dateOfBirth);\n    const today = new Date();\n    const age = today.getFullYear() - birthDate.getFullYear();\n    const monthDiff = today.getMonth() - birthDate.getMonth();\n    \n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n      return age - 1;\n    }\n    return age;\n  };\n\n  const getStatusBadge = (patient: any) => {\n    if (!patient.isActive) {\n      return <Badge variant=\"secondary\" className=\"bg-gray-100 text-gray-600\">Inactive</Badge>;\n    }\n    if (patient.fileCount > 0) {\n      return <Badge className=\"bg-green-100 text-green-700\">Reported</Badge>;\n    }\n    return <Badge className=\"bg-blue-100 text-blue-700\">Active</Badge>;\n  };\n\n  const getSpecialtyColor = (specialty: string) => {\n    const colors = {\n      radiology: \"bg-blue-50 text-blue-700 border-blue-200\",\n      pediatric: \"bg-green-50 text-green-700 border-green-200\", \n      gynac: \"bg-pink-50 text-pink-700 border-pink-200\",\n      medicines: \"bg-purple-50 text-purple-700 border-purple-200\",\n      surgeon: \"bg-red-50 text-red-700 border-red-200\",\n    };\n    return colors[specialty as keyof typeof colors] || \"bg-gray-50 text-gray-700 border-gray-200\";\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedPatients(filteredPatients?.map((p: any) => p.id) || []);\n    } else {\n      setSelectedPatients([]);\n    }\n  };\n\n  const handleSelectPatient = (patientId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedPatients(prev => [...prev, patientId]);\n    } else {\n      setSelectedPatients(prev => prev.filter(id => id !== patientId));\n    }\n  };\n\n  const handleDeletePatient = (patientId: string, patientName: string) => {\n    if (window.confirm(`Are you sure you want to deactivate ${patientName}? This patient will be marked as inactive but data will be preserved.`)) {\n      deletePatientMutation.mutate(patientId);\n    }\n  };\n\n  const handleBulkDelete = () => {\n    if (window.confirm(`Are you sure you want to deactivate ${selectedPatients.length} patient(s)? They will be marked as inactive but data will be preserved.`)) {\n      bulkDeleteMutation.mutate(selectedPatients);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"flex items-center space-x-2\">\n            <RefreshCw className=\"w-6 h-6 animate-spin text-primary\" />\n            <span className=\"text-lg text-muted-foreground\">Loading patient data...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 bg-gradient-to-br from-blue-50/50 to-white min-h-screen\" data-testid=\"patients-view\">\n      {/* Header Section */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-1\">\n            <h1 className=\"text-3xl font-bold text-gray-900\">Patient Worklist</h1>\n            <p className=\"text-gray-600\">Medical Records & Study Management System</p>\n            <div className=\"flex items-center space-x-4 text-sm text-gray-500 mt-2\">\n              <span className=\"flex items-center space-x-1\">\n                <User className=\"w-4 h-4\" />\n                <span>Total: {filteredPatients?.length || 0} patients</span>\n              </span>\n              <span className=\"flex items-center space-x-1\">\n                <Calendar className=\"w-4 h-4\" />\n                <span>Today: {new Date().toLocaleDateString()}</span>\n              </span>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              className=\"flex items-center space-x-2\"\n            >\n              <RefreshCw className=\"w-4 h-4\" />\n              <span>Refresh</span>\n            </Button>\n            <Button \n              onClick={() => setLocation(\"/add-patient\")}\n              className=\"flex items-center space-x-2 bg-blue-600 hover:bg-blue-700\"\n              data-testid=\"button-add-patient\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              <span>New Patient</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Advanced Filter Section */}\n      <Card className=\"mb-6 border-blue-100 shadow-sm\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search by name, ID, phone...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-patients\"\n              />\n            </div>\n            \n            <Select value={selectedSpecialty} onValueChange={setSelectedSpecialty}>\n              <SelectTrigger data-testid=\"select-specialty\">\n                <SelectValue placeholder=\"All Specialties\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Specialties</SelectItem>\n                <SelectItem value=\"radiology\">Radiology</SelectItem>\n                <SelectItem value=\"pediatric\">Pediatric</SelectItem>\n                <SelectItem value=\"gynac\">Gynecology</SelectItem>\n                <SelectItem value=\"medicines\">General Medicine</SelectItem>\n                <SelectItem value=\"surgeon\">Surgery</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger data-testid=\"select-status\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"inactive\">Inactive</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              data-testid=\"input-filter-date\"\n            />\n\n            <Button \n              variant=\"outline\" \n              className=\"flex items-center space-x-2\"\n              onClick={() => {\n                setSearchQuery(\"\");\n                setSelectedSpecialty(\"all\");\n                setSelectedStatus(\"all\");\n                setSelectedDate(\"\");\n              }}\n            >\n              <Filter className=\"w-4 h-4\" />\n              <span>Clear</span>\n            </Button>\n\n            {selectedPatients.length > 0 && (\n              <Button \n                variant=\"outline\" \n                className=\"flex items-center space-x-2 text-red-600 border-red-200 hover:bg-red-50\"\n                onClick={handleBulkDelete}\n                disabled={bulkDeleteMutation.isPending}\n                data-testid=\"button-bulk-delete\"\n              >\n                <Trash2 className=\"w-4 h-4\" />\n                <span>\n                  {bulkDeleteMutation.isPending ? 'Deactivating...' : `Delete (${selectedPatients.length})`}\n                </span>\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Medical Worklist Table */}\n      <Card className=\"shadow-lg border-blue-100\">\n        <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 text-white p-4 rounded-t-lg\">\n          <h2 className=\"text-lg font-semibold flex items-center space-x-2\">\n            <FileText className=\"w-5 h-5\" />\n            <span>Patient Study Worklist</span>\n          </h2>\n        </div>\n        \n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader className=\"bg-blue-50\">\n                <TableRow className=\"border-blue-100\">\n                  <TableHead className=\"w-12\">\n                    <Checkbox\n                      checked={selectedPatients.length === filteredPatients?.length && filteredPatients.length > 0}\n                      onCheckedChange={handleSelectAll}\n                      data-testid=\"checkbox-select-all\"\n                    />\n                  </TableHead>\n                  <TableHead className=\"font-semibold text-blue-900\">Actions</TableHead>\n                  <TableHead className=\"font-semibold text-blue-900\">Status</TableHead>\n                  <TableHead className=\"font-semibold text-blue-900\">Patient ID</TableHead>\n                  <TableHead className=\"font-semibold text-blue-900\">Patient Name</TableHead>\n                  <TableHead className=\"font-semibold text-blue-900\">Age/Sex</TableHead>\n                  <TableHead className=\"font-semibold text-blue-900\">Contact</TableHead>\n                  <TableHead className=\"font-semibold text-blue-900\">Study Date</TableHead>\n                  <TableHead className=\"font-semibold text-blue-900\">Specialty</TableHead>\n                  <TableHead className=\"font-semibold text-blue-900\">Chief Complaint</TableHead>\n                  <TableHead className=\"font-semibold text-blue-900\">Files</TableHead>\n                  <TableHead className=\"font-semibold text-blue-900\">Last Updated</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredPatients?.length > 0 ? (\n                  filteredPatients.map((patient: any, index: number) => (\n                    <TableRow \n                      key={patient.id} \n                      className={`\n                        hover:bg-blue-50/50 transition-colors cursor-pointer\n                        ${selectedPatients.includes(patient.id) ? 'bg-blue-50' : ''}\n                        ${index % 2 === 0 ? 'bg-gray-50/30' : ''}\n                      `}\n                      onClick={() => setLocation(`/patients/${patient.id}`)}\n                      data-testid={`patient-row-${patient.id}`}\n                    >\n                      <TableCell>\n                        <Checkbox\n                          checked={selectedPatients.includes(patient.id)}\n                          onCheckedChange={(checked) => handleSelectPatient(patient.id, checked as boolean)}\n                          onClick={(e) => e.stopPropagation()}\n                          data-testid={`checkbox-patient-${patient.id}`}\n                        />\n                      </TableCell>\n                      \n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setLocation(`/patients/${patient.id}`);\n                            }}\n                            data-testid={`button-view-${patient.id}`}\n                          >\n                            <Eye className=\"w-4 h-4 text-blue-600\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={(e) => e.stopPropagation()}\n                            data-testid={`button-edit-${patient.id}`}\n                          >\n                            <Edit className=\"w-4 h-4 text-green-600\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleDeletePatient(patient.id, patient.name);\n                            }}\n                            disabled={deletePatientMutation.isPending}\n                            data-testid={`button-delete-${patient.id}`}\n                            title=\"Deactivate patient (soft delete)\"\n                          >\n                            <Trash2 className=\"w-4 h-4 text-red-600\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n\n                      <TableCell>\n                        {getStatusBadge(patient)}\n                      </TableCell>\n\n                      <TableCell className=\"font-mono text-sm text-blue-600\">\n                        {patient.id.slice(-8).toUpperCase()}\n                      </TableCell>\n\n                      <TableCell>\n                        <div className=\"font-semibold text-gray-900\" data-testid={`text-patient-name-${patient.id}`}>\n                          {patient.name}\n                        </div>\n                      </TableCell>\n\n                      <TableCell>\n                        <div className=\"text-sm\">\n                          <div className=\"font-medium\">{getAge(patient.dateOfBirth)}Y</div>\n                          <div className=\"text-gray-500 capitalize\">{patient.gender}</div>\n                        </div>\n                      </TableCell>\n\n                      <TableCell>\n                        <div className=\"text-sm space-y-1\">\n                          <div className=\"flex items-center space-x-1\">\n                            <Phone className=\"w-3 h-3 text-gray-400\" />\n                            <span className=\"text-gray-600\">{patient.phone}</span>\n                          </div>\n                          {patient.email && (\n                            <div className=\"flex items-center space-x-1\">\n                              <Mail className=\"w-3 h-3 text-gray-400\" />\n                              <span className=\"text-gray-600 truncate max-w-32\">{patient.email}</span>\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n\n                      <TableCell>\n                        <div className=\"text-sm\">\n                          <div className=\"font-medium\">{new Date(patient.createdAt).toLocaleDateString()}</div>\n                          <div className=\"text-gray-500\">{new Date(patient.createdAt).toLocaleTimeString()}</div>\n                        </div>\n                      </TableCell>\n\n                      <TableCell>\n                        <Badge \n                          className={`${getSpecialtyColor(patient.specialty)} capitalize border`}\n                          data-testid={`badge-specialty-${patient.id}`}\n                        >\n                          {patient.specialty}\n                        </Badge>\n                      </TableCell>\n\n                      <TableCell>\n                        <div className=\"text-sm text-gray-600 max-w-48 truncate\">\n                          {patient.chiefComplaint || 'Not specified'}\n                        </div>\n                      </TableCell>\n\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"text-sm font-medium text-blue-600\">\n                            {patient.fileCount}\n                          </div>\n                          {patient.fileCount > 0 && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                setLocation(`/patients/${patient.id}`);\n                              }}\n                              className={patient.specialty === 'radiology' ? 'bg-blue-50 hover:bg-blue-100' : ''}\n                              data-testid={`button-files-${patient.id}`}\n                            >\n                              {patient.specialty === 'radiology' ? (\n                                <MonitorPlay className=\"w-4 h-4 text-blue-600\" />\n                              ) : (\n                                <FileText className=\"w-4 h-4 text-blue-600\" />\n                              )}\n                            </Button>\n                          )}\n                          {patient.specialty === 'radiology' && patient.fileCount > 0 && (\n                            <Badge className=\"bg-green-100 text-green-800 text-xs px-1 py-0\">\n                              Medical\n                            </Badge>\n                          )}\n                        </div>\n                      </TableCell>\n\n                      <TableCell>\n                        <div className=\"text-sm text-gray-500\">\n                          {new Date(patient.updatedAt).toLocaleDateString()}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={12} className=\"text-center py-12\">\n                      <div className=\"flex flex-col items-center space-y-3 text-gray-500\">\n                        <FileText className=\"w-12 h-12\" />\n                        <div className=\"text-lg font-medium\">No patients found</div>\n                        <div className=\"text-sm\">Try adjusting your search filters or add a new patient</div>\n                        <Button \n                          onClick={() => setLocation(\"/add-patient\")}\n                          className=\"mt-4\"\n                          data-testid=\"button-add-first-patient\"\n                        >\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add First Patient\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary Footer */}\n      <div className=\"mt-6 flex items-center justify-between text-sm text-gray-500\">\n        <div className=\"flex items-center space-x-4\">\n          <span>Showing {filteredPatients?.length || 0} patients</span>\n          {selectedPatients.length > 0 && (\n            <span className=\"text-blue-600\">{selectedPatients.length} selected</span>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <span>Last updated: {new Date().toLocaleTimeString()}</span>\n          <RefreshCw className=\"w-4 h-4\" />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":23169},"client/src/pages/Reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\n\nexport default function Reports() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedStatus, setSelectedStatus] = useState(\"\");\n  const [selectedType, setSelectedType] = useState(\"\");\n\n  // This would fetch actual reports data\n  const { data: reports, isLoading } = useQuery({\n    queryKey: [\"/api/reports\"],\n    queryFn: async () => {\n      // Mock data for now since reports endpoint doesn't exist yet\n      return [];\n    },\n  });\n\n  const handleExportToExcel = () => {\n    // Implementation for Excel export\n    console.log(\"Exporting to Excel...\");\n  };\n\n  const handleExportToCSV = () => {\n    // Implementation for CSV export\n    console.log(\"Exporting to CSV...\");\n  };\n\n  const handleGenerateReport = () => {\n    // Implementation for generating new report\n    console.log(\"Generating new report...\");\n  };\n\n  return (\n    <div className=\"p-6\" data-testid=\"reports-view\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Medical Reports</h2>\n          <p className=\"text-muted-foreground\">View, generate, and export patient reports</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button \n            variant=\"outline\" \n            onClick={handleExportToExcel}\n            data-testid=\"button-export-excel\"\n          >\n            <i className=\"fas fa-file-excel mr-2\"></i>\n            Export Excel\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={handleExportToCSV}\n            data-testid=\"button-export-csv\"\n          >\n            <i className=\"fas fa-file-csv mr-2\"></i>\n            Export CSV\n          </Button>\n          <Button onClick={handleGenerateReport} data-testid=\"button-generate-report\">\n            <i className=\"fas fa-plus mr-2\"></i>\n            Generate Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search reports...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-search-reports\"\n            />\n            \n            <Select value={selectedType} onValueChange={setSelectedType}>\n              <SelectTrigger data-testid=\"select-report-type\">\n                <SelectValue placeholder=\"Report Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"radiology\">Radiology Report</SelectItem>\n                <SelectItem value=\"lab\">Lab Report</SelectItem>\n                <SelectItem value=\"pathology\">Pathology Report</SelectItem>\n                <SelectItem value=\"discharge\">Discharge Summary</SelectItem>\n                <SelectItem value=\"consultation\">Consultation Note</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger data-testid=\"select-report-status\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"reviewed\">Reviewed</SelectItem>\n                <SelectItem value=\"archived\">Archived</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Input\n              type=\"date\"\n              data-testid=\"input-report-date\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Report Templates */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n        <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-x-ray text-primary-foreground\"></i>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-foreground\">Radiology Report</h3>\n                <p className=\"text-sm text-muted-foreground\">Standard radiology report template</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-chart-1 rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-flask text-white\"></i>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-foreground\">Lab Report</h3>\n                <p className=\"text-sm text-muted-foreground\">Laboratory test results template</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-chart-2 rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-microscope text-white\"></i>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-foreground\">Pathology Report</h3>\n                <p className=\"text-sm text-muted-foreground\">Pathology examination template</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Reports List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Reports</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"animate-pulse flex items-center space-x-4 p-4 border border-border rounded\">\n                  <div className=\"h-10 w-10 bg-muted rounded\"></div>\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/6\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : reports?.length > 0 ? (\n            <div className=\"space-y-4\">\n              {reports.map((report: any) => (\n                <div key={report.id} className=\"flex items-center justify-between p-4 border border-border rounded hover:bg-muted/50\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-file-medical text-primary-foreground\"></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-foreground\">{report.title}</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Patient: {report.patientName} â€¢ {new Date(report.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={report.status === 'completed' ? 'default' : 'secondary'}>\n                      {report.status}\n                    </Badge>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <i className=\"fas fa-eye\"></i>\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <i className=\"fas fa-download\"></i>\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <i className=\"fas fa-file-medical text-4xl text-muted-foreground mb-4\"></i>\n              <h3 className=\"text-lg font-medium text-foreground mb-2\">No Reports Found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchQuery || selectedType || selectedStatus \n                  ? \"No reports match your current filters.\" \n                  : \"Start by generating your first report.\"}\n              </p>\n              <Button onClick={handleGenerateReport}>\n                <i className=\"fas fa-plus mr-2\"></i>\n                Generate Report\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9379},"client/src/pages/Settings.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm({\n    defaultValues: {\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      email: user?.email || \"\",\n      phone: user?.phone || \"\",\n      emailNotifications: user?.emailNotifications ?? true,\n      smsNotifications: false,\n      archivalPeriod: \"yearly\",\n      systemTheme: \"light\",\n    },\n  });\n\n  const handleSaveProfile = async (data: any) => {\n    setIsLoading(true);\n    try {\n      // API call to update profile\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully!\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSaveNotifications = async (data: any) => {\n    setIsLoading(true);\n    try {\n      // API call to update notification settings\n      toast({\n        title: \"Success\",\n        description: \"Notification settings updated!\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSaveSystem = async (data: any) => {\n    setIsLoading(true);\n    try {\n      // API call to update system settings\n      toast({\n        title: \"Success\",\n        description: \"System settings updated!\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"p-6\" data-testid=\"settings-view\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-foreground\">Settings</h2>\n        <p className=\"text-muted-foreground\">Manage your account and system preferences</p>\n      </div>\n\n      <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">Profile</TabsTrigger>\n          <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">Notifications</TabsTrigger>\n          <TabsTrigger value=\"system\" data-testid=\"tab-system\">System</TabsTrigger>\n          <TabsTrigger value=\"security\" data-testid=\"tab-security\">Security</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"profile\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Profile Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleSaveProfile)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>First Name</FormLabel>\n                          <FormControl>\n                            <Input data-testid=\"input-first-name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Last Name</FormLabel>\n                          <FormControl>\n                            <Input data-testid=\"input-last-name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" disabled data-testid=\"input-email\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"phone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number</FormLabel>\n                          <FormControl>\n                            <Input data-testid=\"input-phone\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-user text-2xl text-primary-foreground\"></i>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-foreground\">Profile Picture</p>\n                      <p className=\"text-xs text-muted-foreground\">Upload a new avatar</p>\n                      <Button variant=\"outline\" size=\"sm\" className=\"mt-2\">\n                        <i className=\"fas fa-upload mr-2\"></i>\n                        Change Avatar\n                      </Button>\n                    </div>\n                  </div>\n\n                  <Button type=\"submit\" disabled={isLoading} data-testid=\"button-save-profile\">\n                    {isLoading ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                        Saving...\n                      </>\n                    ) : (\n                      \"Save Changes\"\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"notifications\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Notification Preferences</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleSaveNotifications)} className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-foreground\">Email Notifications</p>\n                        <p className=\"text-xs text-muted-foreground\">Receive email alerts for patient updates</p>\n                      </div>\n                      <FormField\n                        control={form.control}\n                        name=\"emailNotifications\"\n                        render={({ field }) => (\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"switch-email-notifications\"\n                            />\n                          </FormControl>\n                        )}\n                      />\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-foreground\">SMS Notifications</p>\n                        <p className=\"text-xs text-muted-foreground\">Receive text messages for urgent updates</p>\n                      </div>\n                      <FormField\n                        control={form.control}\n                        name=\"smsNotifications\"\n                        render={({ field }) => (\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"switch-sms-notifications\"\n                            />\n                          </FormControl>\n                        )}\n                      />\n                    </div>\n\n                    <Separator />\n\n                    <div>\n                      <p className=\"text-sm font-medium text-foreground mb-2\">Notification Types</p>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Patient Added</span>\n                          <Switch defaultChecked />\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Patient Updated</span>\n                          <Switch defaultChecked />\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>File Uploaded</span>\n                          <Switch />\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>System Updates</span>\n                          <Switch />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Button type=\"submit\" disabled={isLoading} data-testid=\"button-save-notifications\">\n                    {isLoading ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                        Saving...\n                      </>\n                    ) : (\n                      \"Save Preferences\"\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"system\">\n          <Card>\n            <CardHeader>\n              <CardTitle>System Settings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleSaveSystem)} className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"archivalPeriod\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Patient Data Archival Period</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-archival-period\">\n                                <SelectValue placeholder=\"Select archival period\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"6months\">6 Months</SelectItem>\n                              <SelectItem value=\"yearly\">1 Year</SelectItem>\n                              <SelectItem value=\"2years\">2 Years</SelectItem>\n                              <SelectItem value=\"5years\">5 Years</SelectItem>\n                              <SelectItem value=\"never\">Never</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"systemTheme\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>System Theme</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-system-theme\">\n                                <SelectValue placeholder=\"Select theme\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"light\">Light</SelectItem>\n                              <SelectItem value=\"dark\">Dark</SelectItem>\n                              <SelectItem value=\"auto\">Auto</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"space-y-2\">\n                      <p className=\"text-sm font-medium text-foreground\">Data Management</p>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          <i className=\"fas fa-download mr-2\"></i>\n                          Export Data\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <i className=\"fas fa-database mr-2\"></i>\n                          Backup System\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Button type=\"submit\" disabled={isLoading} data-testid=\"button-save-system\">\n                    {isLoading ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                        Saving...\n                      </>\n                    ) : (\n                      \"Save Settings\"\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Security Settings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div>\n                  <p className=\"text-sm font-medium text-foreground mb-2\">Password</p>\n                  <p className=\"text-xs text-muted-foreground mb-4\">Change your account password</p>\n                  <Button variant=\"outline\">\n                    <i className=\"fas fa-key mr-2\"></i>\n                    Change Password\n                  </Button>\n                </div>\n\n                <Separator />\n\n                <div>\n                  <p className=\"text-sm font-medium text-foreground mb-2\">Two-Factor Authentication</p>\n                  <p className=\"text-xs text-muted-foreground mb-4\">Add an extra layer of security to your account</p>\n                  <Button variant=\"outline\">\n                    <i className=\"fas fa-shield-alt mr-2\"></i>\n                    Enable 2FA\n                  </Button>\n                </div>\n\n                <Separator />\n\n                <div>\n                  <p className=\"text-sm font-medium text-foreground mb-2\">Account Activity</p>\n                  <p className=\"text-xs text-muted-foreground mb-4\">View recent login activity and sessions</p>\n                  <Button variant=\"outline\">\n                    <i className=\"fas fa-history mr-2\"></i>\n                    View Activity Log\n                  </Button>\n                </div>\n\n                <Separator />\n\n                <div>\n                  <p className=\"text-sm font-medium text-foreground mb-2\">Danger Zone</p>\n                  <p className=\"text-xs text-muted-foreground mb-4\">Permanently delete your account and all data</p>\n                  <Button variant=\"destructive\">\n                    <i className=\"fas fa-trash mr-2\"></i>\n                    Delete Account\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":17310},"client/src/pages/UserManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport UserForm from \"@/components/UserForm\";\nimport AnalyticsCard from \"@/components/AnalyticsCard\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function UserManagement() {\n  const { user: currentUser } = useAuth();\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedRole, setSelectedRole] = useState(\"\");\n  const [showAddUser, setShowAddUser] = useState(false);\n  const [editingUser, setEditingUser] = useState(null);\n\n  const { data: users, isLoading } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"DELETE\", `/api/users/${userId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredUsers = Array.isArray(users) ? users.filter((user: any) => {\n    const matchesSearch = user.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         user.lastName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         user.email?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesRole = selectedRole === \"all\" || !selectedRole || user.role === selectedRole;\n    return matchesSearch && matchesRole;\n  }) : [];\n\n  const userStats = Array.isArray(users) ? {\n    total: users.length,\n    doctors: users.filter((u: any) => u.role === 'user').length,\n    admins: users.filter((u: any) => u.role === 'admin' || u.role === 'super_admin').length,\n  } : { total: 0, doctors: 0, admins: 0 };\n\n  const roleColors = {\n    super_admin: \"bg-destructive text-destructive-foreground\",\n    admin: \"bg-chart-2 text-white\",\n    user: \"bg-primary text-primary-foreground\",\n  };\n\n  const canManageUsers = (currentUser as any)?.role === 'super_admin' || (currentUser as any)?.role === 'admin';\n\n  return (\n    <div className=\"p-6\" data-testid=\"users-view\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">User Management</h2>\n          <p className=\"text-muted-foreground\">\n            Manage user accounts, roles, and permissions\n            {!canManageUsers && (\n              <span className=\"block text-amber-600 text-sm mt-1\">\n                <i className=\"fas fa-info-circle mr-1\"></i>\n                Admin or Super Admin role required to add/edit users\n              </span>\n            )}\n          </p>\n        </div>\n        {canManageUsers ? (\n          <Dialog open={showAddUser} onOpenChange={setShowAddUser}>\n            <DialogTrigger asChild>\n              <Button className=\"flex items-center space-x-2\" data-testid=\"button-add-user\">\n                <i className=\"fas fa-plus\"></i>\n                <span>Add User</span>\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Add New User</DialogTitle>\n              </DialogHeader>\n              <UserForm \n                onSuccess={() => setShowAddUser(false)}\n                onCancel={() => setShowAddUser(false)}\n              />\n            </DialogContent>\n          </Dialog>\n        ) : (\n          <Button \n            className=\"flex items-center space-x-2\" \n            disabled\n            title=\"Requires Admin or Super Admin role\"\n            data-testid=\"button-add-user-disabled\"\n          >\n            <i className=\"fas fa-plus\"></i>\n            <span>Add User</span>\n          </Button>\n        )}\n      </div>\n      \n      {/* User Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <AnalyticsCard\n          title=\"Total Users\"\n          value={userStats.total}\n          icon=\"fa-users\"\n          color=\"primary\"\n        />\n        \n        <AnalyticsCard\n          title=\"Active Doctors\"\n          value={userStats.doctors}\n          icon=\"fa-user-md\"\n          color=\"chart-1\"\n        />\n        \n        <AnalyticsCard\n          title=\"Administrators\"\n          value={userStats.admins}\n          icon=\"fa-user-shield\"\n          color=\"chart-2\"\n        />\n      </div>\n      \n      {/* Users Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>All Users</CardTitle>\n            <div className=\"flex items-center space-x-4\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search users...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-64\"\n                data-testid=\"input-search-users\"\n              />\n              <Select value={selectedRole} onValueChange={setSelectedRole}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-role-filter\">\n                  <SelectValue placeholder=\"All Roles\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Roles</SelectItem>\n                  <SelectItem value=\"super_admin\">Super Admin</SelectItem>\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                  <SelectItem value=\"user\">Doctor</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"animate-pulse flex items-center space-x-4 p-4\">\n                  <div className=\"h-10 w-10 bg-muted rounded-full\"></div>\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/6\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : filteredUsers?.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted\">\n                  <tr>\n                    <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">User</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Role</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Specialty</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Created</th>\n                    {canManageUsers && (\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Actions</th>\n                    )}\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredUsers.map((user: any) => {\n                    const initials = `${user.firstName?.[0] || ''}${user.lastName?.[0] || ''}` || \n                                    user.email?.[0]?.toUpperCase() || '?';\n                    \n                    return (\n                      <tr key={user.id} className=\"border-b border-border hover:bg-muted/50\">\n                        <td className=\"p-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                              <span className=\"text-xs font-medium text-primary-foreground\">{initials}</span>\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-foreground\">\n                                {user.firstName || user.lastName \n                                  ? `${user.firstName || ''} ${user.lastName || ''}`.trim()\n                                  : user.email\n                                }\n                              </p>\n                              <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"p-4\">\n                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium capitalize ${roleColors[user.role as keyof typeof roleColors] || 'bg-muted text-muted-foreground'}`}>\n                            {user.role?.replace('_', ' ')}\n                          </span>\n                        </td>\n                        <td className=\"p-4 text-sm text-foreground capitalize\">\n                          {user.specialty || '-'}\n                        </td>\n                        <td className=\"p-4\">\n                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${user.isActive ? 'bg-accent text-accent-foreground' : 'bg-muted text-muted-foreground'}`}>\n                            {user.isActive ? 'Active' : 'Inactive'}\n                          </span>\n                        </td>\n                        <td className=\"p-4 text-sm text-muted-foreground\">\n                          {new Date(user.createdAt).toLocaleDateString()}\n                        </td>\n                        {canManageUsers && (\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => setEditingUser(user)}\n                                data-testid={`button-edit-user-${user.id}`}\n                              >\n                                <i className=\"fas fa-edit\"></i>\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                className=\"text-muted-foreground hover:text-foreground\"\n                              >\n                                <i className=\"fas fa-key\"></i>\n                              </Button>\n                              {user.id !== (currentUser as any)?.id && (\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  className=\"text-muted-foreground hover:text-destructive\"\n                                  onClick={() => deleteUserMutation.mutate(user.id)}\n                                  data-testid={`button-delete-user-${user.id}`}\n                                >\n                                  <i className=\"fas fa-trash\"></i>\n                                </Button>\n                              )}\n                            </div>\n                          </td>\n                        )}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <i className=\"fas fa-users text-4xl text-muted-foreground mb-4\"></i>\n              <h3 className=\"text-lg font-medium text-foreground mb-2\">No Users Found</h3>\n              <p className=\"text-muted-foreground\">\n                {searchQuery || selectedRole ? \"No users match your current filters.\" : \"No users available.\"}\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit User Dialog */}\n      {editingUser && (\n        <Dialog open={!!editingUser} onOpenChange={() => setEditingUser(null)}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Edit User</DialogTitle>\n            </DialogHeader>\n            <UserForm \n              user={editingUser}\n              onSuccess={() => setEditingUser(null)}\n              onCancel={() => setEditingUser(null)}\n            />\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n","size_bytes":13053},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Clinic Portal\n\n## Overview\n\nA healthcare management system built as a full-stack web application for managing clinic operations. The system provides role-based access control for super admins, admins, and doctors/users to manage patients, medical records, file uploads, notifications, and analytics. Features include patient registration, medical file management with cloud storage, email notifications, reporting capabilities, and comprehensive analytics dashboard.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React + TypeScript**: Modern single-page application with type safety\n- **Vite**: Fast development server and build tool optimized for React\n- **Wouter**: Lightweight client-side routing library for navigation\n- **TanStack Query**: Server state management with caching, background updates, and optimistic updates\n- **Shadcn/ui + Radix**: Comprehensive component library built on Radix primitives for accessibility\n- **Tailwind CSS**: Utility-first styling with CSS variables for theming\n- **React Hook Form + Zod**: Form handling with runtime validation and type inference\n\nThe frontend follows a component-based architecture with clear separation between UI components, business logic hooks, and data fetching. The application uses a sidebar navigation layout with role-based route access controls.\n\n### Backend Architecture\n- **Express.js**: RESTful API server with middleware-based request processing\n- **TypeScript**: End-to-end type safety with shared schema definitions\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL\n- **Session-based Authentication**: Secure user sessions stored in PostgreSQL\n- **Object Storage Service**: File upload handling with ACL-based access control\n- **Email Service**: SendGrid integration for automated notifications\n\nThe backend implements a clean separation of concerns with dedicated modules for database operations, authentication, file storage, and email services. API routes are organized by feature with consistent error handling and logging.\n\n### Data Storage Solutions\n- **PostgreSQL**: Primary database using Neon serverless PostgreSQL\n- **Drizzle Schema**: Centralized schema definitions shared between frontend and backend\n- **Session Storage**: PostgreSQL-based session management for authentication\n- **File Storage**: Google Cloud Storage integration for medical files and documents\n- **Data Archival**: Configurable patient data archival system for compliance\n\nDatabase design includes comprehensive audit trails with created_at, updated_at, created_by, updated_by, and ip_address fields on all tables. Patient data includes archival capabilities for regulatory compliance.\n\n### Authentication and Authorization\n- **Replit Auth**: OAuth-based authentication using OpenID Connect\n- **Role-based Access**: Three-tier permission system (super_admin, admin, user)\n- **Session Management**: Secure session handling with PostgreSQL storage\n- **Route Guards**: Frontend route protection based on user roles and permissions\n- **API Authorization**: Middleware-based request authorization for backend endpoints\n\n### External Dependencies\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Google Cloud Storage**: Object storage for medical files with ACL management\n- **Gmail SMTP**: Email service using Gmail SMTP with nodemailer for patient notifications and system alerts\n- **Replit Auth**: Authentication provider with OpenID Connect integration\n- **Uppy**: File upload library with dashboard UI and AWS S3 compatibility\n\nThe system integrates tightly with Replit's infrastructure for authentication and deployment, while using external services for specialized functionality like email delivery and file storage.","size_bytes":3809},"client/src/pages/PatientDetails.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { ArrowLeft, Calendar, Mail, Phone, MapPin, User, Stethoscope, FileText, Upload, Eye, Image as ImageIcon, MonitorPlay } from \"lucide-react\";\nimport { DICOMViewer } from \"@/components/DICOMViewer\";\n\nexport default function PatientDetails() {\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [uploadedFiles, setUploadedFiles] = useState<string[]>([]);\n  const [selectedFile, setSelectedFile] = useState<any>(null);\n  const [showDICOMViewer, setShowDICOMViewer] = useState(false);\n\n  // Fetch patient details\n  const { data: patient, isLoading: isPatientLoading } = useQuery({\n    queryKey: [\"/api/patients\", id],\n    enabled: !!id,\n  });\n\n  // Fetch patient files\n  const { data: patientFiles, isLoading: isFilesLoading } = useQuery({\n    queryKey: [\"/api/patients\", id, \"files\"],\n    enabled: !!id,\n  });\n\n  const handleGetUploadParameters = async () => {\n    const response = await apiRequest(\"POST\", \"/api/objects/upload\", {});\n    const data = await response.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleUploadComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful) {\n      const newFileURLs = result.successful.map(file => file.uploadURL).filter((url): url is string => url !== undefined);\n      setUploadedFiles(prev => [...prev, ...newFileURLs]);\n    }\n  };\n\n  const uploadFilesMutation = useMutation({\n    mutationFn: async (fileURLs: string[]) => {\n      for (const fileURL of fileURLs) {\n        const fileName = fileURL.split('/').pop() || 'upload';\n        await apiRequest(\"PUT\", \"/api/patient-files\", {\n          patientId: id,\n          fileName,\n          fileURL,\n        });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\", id, \"files\"] });\n      setUploadedFiles([]);\n      toast({\n        title: \"Success\",\n        description: \"Files uploaded successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload files. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveFiles = () => {\n    if (uploadedFiles.length > 0) {\n      uploadFilesMutation.mutate(uploadedFiles);\n    }\n  };\n\n  const openFileViewer = (file: any) => {\n    setSelectedFile(file);\n    setShowDICOMViewer(true);\n  };\n\n  const closeFileViewer = () => {\n    setShowDICOMViewer(false);\n    setSelectedFile(null);\n  };\n\n  const isDICOMFile = (fileName: string) => {\n    const dicomExtensions = ['.dcm', '.dicom', '.dic'];\n    const extension = fileName.toLowerCase().substring(fileName.lastIndexOf('.'));\n    const isDicomByExtension = dicomExtensions.includes(extension);\n    const isDicomByName = fileName.toLowerCase().includes('dicom');\n    return isDicomByExtension || isDicomByName;\n  };\n\n  const isRadiologyImage = (fileName: string) => {\n    const radiologyTerms = ['xray', 'ct', 'mri', 'scan', 'ultrasound'];\n    return radiologyTerms.some(term => fileName.toLowerCase().includes(term));\n  };\n\n  const getFileIcon = (fileName: string) => {\n    if (isDICOMFile(fileName)) {\n      return <MonitorPlay className=\"w-5 h-5 text-blue-600\" />;\n    }\n    const extension = fileName.toLowerCase().substring(fileName.lastIndexOf('.'));\n    if (['.jpg', '.jpeg', '.png', '.gif', '.bmp'].includes(extension)) {\n      return <ImageIcon className=\"w-5 h-5 text-green-600\" />;\n    }\n    return <FileText className=\"w-5 h-5 text-gray-600\" />;\n  };\n\n  if (isPatientLoading) {\n    return (\n      <div className=\"p-6 max-w-6xl mx-auto\" data-testid=\"patient-details-loading\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <div className=\"lg:col-span-2 space-y-6\">\n              <div className=\"h-64 bg-muted rounded\"></div>\n              <div className=\"h-48 bg-muted rounded\"></div>\n            </div>\n            <div className=\"h-96 bg-muted rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!patient) {\n    return (\n      <div className=\"p-6 max-w-6xl mx-auto text-center\" data-testid=\"patient-not-found\">\n        <div className=\"py-12\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-2\">Patient Not Found</h2>\n          <p className=\"text-muted-foreground mb-4\">The patient you're looking for doesn't exist or has been removed.</p>\n          <Button onClick={() => setLocation(\"/patients\")} data-testid=\"button-back-to-patients\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Patients\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const age = new Date().getFullYear() - new Date((patient as any).dateOfBirth).getFullYear();\n  const formattedDate = new Date((patient as any).dateOfBirth).toLocaleDateString();\n  const specialtyColors = {\n    radiology: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\",\n    pediatric: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\",\n    gynac: \"bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-300\",\n    medicines: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300\",\n    surgeon: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\",\n  };\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\" data-testid=\"patient-details-view\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/patients\")}\n            data-testid=\"button-back-patients\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Patients\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-patient-name\">{(patient as any).name}</h1>\n            <p className=\"text-muted-foreground\">Patient ID: {(patient as any).id.slice(-8)}</p>\n          </div>\n        </div>\n        <Badge \n          className={`${specialtyColors[(patient as any).specialty as keyof typeof specialtyColors] || 'bg-gray-100 text-gray-800'}`}\n          data-testid=\"badge-specialty\"\n        >\n          {(patient as any).specialty.charAt(0).toUpperCase() + (patient as any).specialty.slice(1)}\n        </Badge>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Content */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Personal Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <User className=\"w-5 h-5 mr-2\" />\n                Personal Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\" data-testid=\"info-phone\">\n                    <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Phone</p>\n                      <p className=\"font-medium\">{(patient as any).phone}</p>\n                    </div>\n                  </div>\n                  \n                  {(patient as any).email && (\n                    <div className=\"flex items-center space-x-3\" data-testid=\"info-email\">\n                      <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Email</p>\n                        <p className=\"font-medium\">{(patient as any).email}</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center space-x-3\" data-testid=\"info-dob\">\n                    <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Date of Birth</p>\n                      <p className=\"font-medium\">{formattedDate} (Age {age})</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\" data-testid=\"info-gender\">\n                    <User className=\"w-4 h-4 text-muted-foreground\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Gender</p>\n                      <p className=\"font-medium capitalize\">{(patient as any).gender}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-3\" data-testid=\"info-specialty\">\n                    <Stethoscope className=\"w-4 h-4 text-muted-foreground\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Specialty</p>\n                      <p className=\"font-medium capitalize\">{(patient as any).specialty}</p>\n                    </div>\n                  </div>\n                  \n                  {(patient as any).address && (\n                    <div className=\"flex items-center space-x-3\" data-testid=\"info-address\">\n                      <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Address</p>\n                        <p className=\"font-medium\">{(patient as any).address}</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Medical Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2\" />\n                Medical Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {(patient as any).chiefComplaint && (\n                <div data-testid=\"info-chief-complaint\">\n                  <h4 className=\"font-medium text-foreground mb-2\">Chief Complaint</h4>\n                  <p className=\"text-muted-foreground bg-muted p-3 rounded-md\">{(patient as any).chiefComplaint}</p>\n                </div>\n              )}\n              \n              {(patient as any).medicalHistory && (\n                <div data-testid=\"info-medical-history\">\n                  <h4 className=\"font-medium text-foreground mb-2\">Medical History</h4>\n                  <p className=\"text-muted-foreground bg-muted p-3 rounded-md\">{(patient as any).medicalHistory}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Files & Upload Section */}\n        <div className=\"space-y-6\">\n          {/* Existing Files */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span className=\"flex items-center space-x-2\">\n                  <FileText className=\"w-5 h-5\" />\n                  <span>Medical Files ({Array.isArray(patientFiles) ? patientFiles.length : 0})</span>\n                  {(patient as any)?.specialty === 'radiology' && (\n                    <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\">Radiology</Badge>\n                  )}\n                </span>\n                {Array.isArray(patientFiles) && patientFiles.some((file: any) => isDICOMFile(file.fileName)) && (\n                  <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\">\n                    <MonitorPlay className=\"w-3 h-3 mr-1\" />\n                    DICOM Available\n                  </Badge>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isFilesLoading ? (\n                <div className=\"space-y-3\">\n                  {[1, 2, 3].map((i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : Array.isArray(patientFiles) && patientFiles.length > 0 ? (\n                <div className=\"space-y-3\" data-testid=\"patient-files-list\">\n                  {patientFiles.map((file: any) => (\n                    <div key={file.id} className=\"flex items-center justify-between p-3 bg-muted rounded-md hover:bg-muted/80 transition-colors\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-white rounded-md flex items-center justify-center border\">\n                          {getFileIcon(file.fileName)}\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium text-sm\" data-testid={`file-name-${file.id}`}>{file.fileName}</p>\n                          <div className=\"flex items-center space-x-3 text-xs text-muted-foreground\">\n                            <span>Uploaded {new Date(file.createdAt).toLocaleDateString()}</span>\n                            {isDICOMFile(file.fileName) ? (\n                              <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700 px-2 py-0.5\">DICOM</Badge>\n                            ) : isRadiologyImage(file.fileName) ? (\n                              <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700 px-2 py-0.5\">Radiology</Badge>\n                            ) : null}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant={isDICOMFile(file.fileName) ? \"default\" : \"outline\"}\n                          onClick={() => openFileViewer(file)}\n                          className={`flex items-center space-x-1 ${isDICOMFile(file.fileName) ? 'bg-blue-600 hover:bg-blue-700 text-white' : isRadiologyImage(file.fileName) ? 'bg-green-600 hover:bg-green-700 text-white' : ''}`}\n                          data-testid={`button-view-file-${file.id}`}\n                        >\n                          {isDICOMFile(file.fileName) ? (\n                            <MonitorPlay className=\"w-4 h-4\" />\n                          ) : isRadiologyImage(file.fileName) ? (\n                            <MonitorPlay className=\"w-4 h-4\" />\n                          ) : (\n                            <Eye className=\"w-4 h-4\" />\n                          )}\n                          <span>\n                            {isDICOMFile(file.fileName) \n                              ? 'Open DICOM' \n                              : isRadiologyImage(file.fileName) \n                              ? 'Medical Viewer' \n                              : 'View'}\n                          </span>\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\" data-testid=\"no-files-message\">\n                  <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                  <p className=\"text-muted-foreground\">No files uploaded yet</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Upload New Files */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Upload className=\"w-5 h-5 mr-2\" />\n                Upload New Files\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center hover:border-primary transition-colors\">\n                  <ObjectUploader\n                    maxNumberOfFiles={10}\n                    maxFileSize={10485760}\n                    onGetUploadParameters={handleGetUploadParameters}\n                    onComplete={handleUploadComplete}\n                    buttonClassName=\"bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90\"\n                  >\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Choose Files\n                  </ObjectUploader>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    Supported formats: JPEG, PNG, PDF, DICOM (Max 10MB per file)\n                    {(patient as any)?.specialty === 'radiology' && (\n                      <span className=\"block text-blue-600 font-medium mt-1\">\n                        ðŸ“‹ For radiology patients: Upload DICOM, X-ray, CT, MRI, or scan files for advanced viewing\n                      </span>\n                    )}\n                  </p>\n                </div>\n\n                {uploadedFiles.length > 0 && (\n                  <div className=\"space-y-3\" data-testid=\"pending-uploads\">\n                    <h4 className=\"text-sm font-medium\">Files ready to upload:</h4>\n                    {uploadedFiles.map((fileURL, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-2 bg-yellow-50 dark:bg-yellow-900/20 rounded border\">\n                        <div className=\"flex items-center space-x-2\">\n                          <FileText className=\"w-4 h-4 text-yellow-600\" />\n                          <span className=\"text-sm\">File {index + 1}</span>\n                        </div>\n                        <Badge variant=\"secondary\">Pending</Badge>\n                      </div>\n                    ))}\n                    <Button\n                      onClick={handleSaveFiles}\n                      className=\"w-full\"\n                      disabled={uploadFilesMutation.isPending}\n                      data-testid=\"button-save-files\"\n                    >\n                      {uploadFilesMutation.isPending ? \"Saving...\" : \"Save Files\"}\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* DICOM Viewer Modal */}\n        {showDICOMViewer && selectedFile && (\n      <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\">\n        <div className=\"bg-white dark:bg-gray-900 p-4 rounded-lg max-w-7xl max-h-full w-full h-full m-4 flex flex-col\">\n          <div className=\"flex items-center justify-between mb-4 pb-2 border-b\">\n            <h3 className=\"text-lg font-semibold\" data-testid=\"dicom-viewer-title\">\n              Medical Viewer: {selectedFile.fileName}\n            </h3>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={closeFileViewer}\n              data-testid=\"button-close-dicom-viewer\"\n            >\n              âœ•\n            </Button>\n          </div>\n          <div className=\"flex-1 overflow-hidden min-h-0\">\n            {isDICOMFile(selectedFile.fileName) || isRadiologyImage(selectedFile.fileName) || (patient as any)?.specialty === 'radiology' ? (\n              <DICOMViewer\n                imageUrl={selectedFile.filePath}\n                isDICOM={isDICOMFile(selectedFile.fileName) || isRadiologyImage(selectedFile.fileName) || (patient as any)?.specialty === 'radiology'}\n                onClose={closeFileViewer}\n                patientInfo={{\n                  name: (patient as any)?.name || 'Unknown Patient',\n                  id: (patient as any)?.id || '',\n                  age: (patient as any)?.dateOfBirth ? new Date().getFullYear() - new Date((patient as any).dateOfBirth).getFullYear() : 'Unknown',\n                  sex: (patient as any)?.gender || 'Unknown'\n                }}\n              />\n            ) : (\n              <div className=\"w-full h-full flex items-center justify-center bg-gray-100 dark:bg-gray-800 rounded\">\n                <img\n                  src={selectedFile.filePath}\n                  alt={selectedFile.fileName}\n                  className=\"max-w-full max-h-full object-contain\"\n                  data-testid=\"image-viewer\"\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":21269},"client/src/components/DICOMViewer.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\n// Extend window type for our global flag\ndeclare global {\n  interface Window {\n    cornerstoneToolsInitialized?: boolean;\n  }\n}\n// @ts-ignore - Legacy medical imaging libraries without official TypeScript support\nimport cornerstone from 'cornerstone-core';\n// @ts-ignore\nimport cornerstoneTools from 'cornerstone-tools';\n// @ts-ignore\nimport cornerstoneWebImageLoader from 'cornerstone-web-image-loader';\n// @ts-ignore\nimport cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\n// @ts-ignore\nimport dicomParser from 'dicom-parser';\n// @ts-ignore\nimport cornerstoneMath from 'cornerstone-math';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  ZoomIn, \n  ZoomOut, \n  RotateCw, \n  Move, \n  Ruler, \n  Square, \n  Circle,\n  Type,\n  Download,\n  Maximize2,\n  Settings,\n  RefreshCw,\n  Home,\n  Contrast,\n  Play,\n  Pause,\n  SkipBack,\n  SkipForward\n} from 'lucide-react';\n\ninterface DICOMViewerProps {\n  imageUrl: string;\n  patientInfo?: {\n    name: string;\n    id: string;\n    age: number | string;\n    sex: string;\n    studyDate?: string;\n  };\n  onClose?: () => void;\n  isDICOM?: boolean;\n}\n\nexport function DICOMViewer({ imageUrl, patientInfo, onClose, isDICOM = false }: DICOMViewerProps) {\n  const viewportRef = useRef<HTMLDivElement>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [activeTool, setActiveTool] = useState('Wwwc');\n  const [imageData, setImageData] = useState<any>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentFrame, setCurrentFrame] = useState(1);\n  const [totalFrames, setTotalFrames] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    console.log('DICOM Viewer: Starting initialization...');\n    \n    // Check if cornerstone is properly loaded\n    if (!cornerstone || typeof cornerstone.enable !== 'function') {\n      console.error('DICOM Viewer: Cornerstone library not properly loaded');\n      setError('Medical viewer initialization failed. Please refresh the page.');\n      return;\n    }\n\n    try {\n      // Ensure cornerstone tools is initialized only once globally\n      if (!window.cornerstoneToolsInitialized) {\n        // Initialize cornerstone\n        cornerstoneWebImageLoader.external.cornerstone = cornerstone;\n        cornerstoneWebImageLoader.external.dicomParser = dicomParser;\n        \n        // Initialize WADO image loader for DICOM\n        cornerstoneWADOImageLoader.external.cornerstone = cornerstone;\n        cornerstoneWADOImageLoader.external.dicomParser = dicomParser;\n        \n        // Configure WADO loader with error handling\n        try {\n          cornerstoneWADOImageLoader.configure({\n            useWebWorkers: false, // Disable web workers to avoid CORS issues\n          });\n        } catch (configError) {\n          console.warn('DICOM Viewer: WADO loader configuration warning:', configError);\n        }\n        \n        // Register image loaders\n        cornerstone.registerImageLoader('wadouri', cornerstoneWADOImageLoader.wadouri.loadImage);\n        cornerstone.registerImageLoader('http', cornerstoneWebImageLoader.loadImage);\n        cornerstone.registerImageLoader('https', cornerstoneWebImageLoader.loadImage);\n        \n        // Initialize cornerstone tools with minimal configuration\n        cornerstoneTools.external.cornerstone = cornerstone;\n        cornerstoneTools.external.cornerstoneMath = cornerstoneMath;\n        \n        try {\n          cornerstoneTools.init({\n            mouseEnabled: true,\n            touchEnabled: false, // Disable touch to avoid pointer events issues\n            globalToolSyncEnabled: false,\n            showSVGCursors: false, // Disable SVG cursors to avoid rendering issues\n          });\n          \n          // Add tools only once globally\n          cornerstoneTools.addTool(cornerstoneTools.WwwcTool);\n          cornerstoneTools.addTool(cornerstoneTools.PanTool);\n          cornerstoneTools.addTool(cornerstoneTools.ZoomTool);\n          cornerstoneTools.addTool(cornerstoneTools.LengthTool);\n          cornerstoneTools.addTool(cornerstoneTools.AngleTool);\n          cornerstoneTools.addTool(cornerstoneTools.RectangleRoiTool);\n          cornerstoneTools.addTool(cornerstoneTools.EllipticalRoiTool);\n          cornerstoneTools.addTool(cornerstoneTools.ArrowAnnotateTool);\n          \n        } catch (toolsError) {\n          console.warn('DICOM Viewer: Tools initialization warning:', toolsError);\n          // Continue without tools if initialization fails\n        }\n        \n        window.cornerstoneToolsInitialized = true;\n      }\n\n      // Enable viewport\n      if (viewportRef.current && !isInitialized) {\n        console.log('DICOM Viewer: Enabling cornerstone viewport');\n        cornerstone.enable(viewportRef.current);\n        setIsInitialized(true);\n        console.log('DICOM Viewer: Viewport enabled successfully');\n      }\n    } catch (error) {\n      console.error('DICOM Viewer: Error initializing cornerstone:', error);\n      // Don't set error, try to continue with basic functionality\n      console.log('DICOM Viewer: Attempting basic initialization...');\n      \n      try {\n        if (viewportRef.current && !isInitialized) {\n          cornerstone.enable(viewportRef.current);\n          setIsInitialized(true);\n          console.log('DICOM Viewer: Basic viewport enabled');\n        }\n      } catch (basicError) {\n        console.error('DICOM Viewer: Basic initialization also failed:', basicError);\n        setError('Failed to initialize medical viewer. Please refresh the page.');\n      }\n    }\n\n    return () => {\n      try {\n        if (viewportRef.current && isInitialized) {\n          cornerstone.disable(viewportRef.current);\n        }\n      } catch (error) {\n        console.error('DICOM Viewer: Error disabling cornerstone:', error);\n      }\n    };\n  }, [imageUrl]);\n\n  // Separate effect to load image after initialization\n  useEffect(() => {\n    if (isInitialized && viewportRef.current) {\n      loadImage();\n    }\n  }, [isInitialized, imageUrl]);\n\n  const loadImage = async () => {\n    if (!viewportRef.current) return;\n\n    // Check if imageUrl is valid\n    if (!imageUrl || typeof imageUrl !== 'string') {\n      console.error('DICOM Viewer: Invalid or missing imageUrl:', imageUrl);\n      setError('No image URL provided');\n      setIsLoading(false);\n      return;\n    }\n\n    console.log('DICOM Viewer: Starting image load', { imageUrl, isDICOM });\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      let imageId: string;\n      \n      if (isDICOM) {\n        // For DICOM files\n        imageId = `wadouri:${imageUrl}`;\n        console.log('DICOM Viewer: Loading as DICOM with imageId:', imageId);\n      } else {\n        // For regular images, ensure proper URL scheme\n        imageId = imageUrl.startsWith('http') ? imageUrl : `${window.location.origin}${imageUrl}`;\n        console.log('DICOM Viewer: Loading as regular image with imageId:', imageId);\n      }\n\n      console.log('DICOM Viewer: About to call cornerstone.loadImage');\n      const image = await cornerstone.loadImage(imageId);\n      console.log('DICOM Viewer: Image loaded successfully', image);\n      \n      cornerstone.displayImage(viewportRef.current, image);\n      setImageData(image);\n      setIsLoading(false);\n\n      // Set up tools\n      setupTools();\n      console.log('DICOM Viewer: Image display completed successfully');\n    } catch (error) {\n      console.error('DICOM Viewer: Error loading image:', error);\n      \n      // Fallback: try loading as regular image\n      try {\n        console.log('DICOM Viewer: Trying fallback loading as regular image');\n        if (!imageUrl || typeof imageUrl !== 'string') {\n          throw new Error('Invalid imageUrl for fallback loading');\n        }\n        const fallbackImageId = imageUrl.startsWith('http') ? imageUrl : `${window.location.origin}${imageUrl}`;\n        const image = await cornerstone.loadImage(fallbackImageId);\n        cornerstone.displayImage(viewportRef.current, image);\n        setImageData(image);\n        setIsLoading(false);\n        setupTools();\n        console.log('DICOM Viewer: Fallback loading successful');\n      } catch (fallbackError) {\n        console.error('DICOM Viewer: Fallback error:', fallbackError);\n        const errorMessage = fallbackError instanceof Error ? fallbackError.message : String(fallbackError);\n        setError(`Failed to load image: ${errorMessage || 'Unknown error'}`);\n        setIsLoading(false);\n        console.error('DICOM Viewer: Complete failure to load image');\n      }\n    }\n  };\n\n  const setupTools = () => {\n    if (!viewportRef.current) return;\n\n    const element = viewportRef.current;\n\n    // Tools are already added globally, just activate them for this viewport\n    try {\n      cornerstoneTools.setToolActive('Wwwc', { mouseButtonMask: 1 });\n      cornerstoneTools.setToolActive('Pan', { mouseButtonMask: 2 });\n      cornerstoneTools.setToolActive('Zoom', { mouseButtonMask: 4 });\n      \n      // Update active tool state\n      setActiveTool('Wwwc');\n    } catch (error) {\n      console.warn('DICOM Viewer: Error setting up tools:', error);\n    }\n  };\n\n  const activateTool = (toolName: string) => {\n    if (!viewportRef.current) return;\n\n    try {\n      // Deactivate all tools first\n      cornerstoneTools.setToolPassive('Wwwc');\n      cornerstoneTools.setToolPassive('Pan');\n      cornerstoneTools.setToolPassive('Zoom');\n      cornerstoneTools.setToolPassive('Length');\n      cornerstoneTools.setToolPassive('Angle');\n      cornerstoneTools.setToolPassive('RectangleRoi');\n      cornerstoneTools.setToolPassive('EllipticalRoi');\n      cornerstoneTools.setToolPassive('ArrowAnnotate');\n\n      // Activate selected tool\n      cornerstoneTools.setToolActive(toolName, { mouseButtonMask: 1 });\n      setActiveTool(toolName);\n    } catch (error) {\n      console.warn('DICOM Viewer: Error activating tool:', error);\n    }\n  };\n\n  const zoomIn = () => {\n    if (!viewportRef.current) return;\n    const viewport = cornerstone.getViewport(viewportRef.current);\n    viewport.scale += 0.25;\n    cornerstone.setViewport(viewportRef.current, viewport);\n  };\n\n  const zoomOut = () => {\n    if (!viewportRef.current) return;\n    const viewport = cornerstone.getViewport(viewportRef.current);\n    viewport.scale = Math.max(0.25, viewport.scale - 0.25);\n    cornerstone.setViewport(viewportRef.current, viewport);\n  };\n\n  const resetView = () => {\n    if (!viewportRef.current) return;\n    cornerstone.reset(viewportRef.current);\n  };\n\n  const rotate = () => {\n    if (!viewportRef.current) return;\n    const viewport = cornerstone.getViewport(viewportRef.current);\n    viewport.rotation += 90;\n    cornerstone.setViewport(viewportRef.current, viewport);\n  };\n\n  const toggleInvert = () => {\n    if (!viewportRef.current) return;\n    const viewport = cornerstone.getViewport(viewportRef.current);\n    viewport.invert = !viewport.invert;\n    cornerstone.setViewport(viewportRef.current, viewport);\n  };\n\n  const downloadImage = () => {\n    if (!viewportRef.current) return;\n    \n    const canvas = cornerstone.getEnabledElement(viewportRef.current).canvas;\n    const link = document.createElement('a');\n    link.download = `medical-image-${Date.now()}.png`;\n    link.href = canvas.toDataURL();\n    link.click();\n  };\n\n  return (\n    <div className=\"h-full bg-black text-white overflow-hidden flex flex-col\" data-testid=\"dicom-viewer\">\n      {/* Patient Info Bar */}\n      <div className=\"bg-gray-900 p-2 border-b border-gray-700 text-sm\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-6\">\n            {patientInfo && (\n              <>\n                <div>\n                  <span className=\"text-gray-400\">Patient:</span>\n                  <span className=\"ml-2 font-medium text-white\">{patientInfo.name}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-400\">ID:</span>\n                  <span className=\"ml-2 font-mono text-white\">{patientInfo.id.slice(-8).toUpperCase()}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-400\">Age/Sex:</span>\n                  <span className=\"ml-2 text-white\">{patientInfo.age}Y / {patientInfo.sex.toUpperCase()}</span>\n                </div>\n              </>\n            )}\n          </div>\n          <Badge variant=\"secondary\" className=\"bg-blue-700 text-blue-100\">\n            {isDICOM ? 'DICOM' : 'IMAGE'}\n          </Badge>\n        </div>\n      </div>\n\n      <div className=\"flex flex-1 min-h-0\">\n        {/* Tool Palette */}\n        <div className=\"w-20 bg-gray-900 border-r border-gray-700 p-2\">\n          <div className=\"space-y-2\">\n            <div className=\"text-xs text-gray-400 mb-3\">Mouse Functions</div>\n            \n            <Button\n              size=\"sm\"\n              variant={activeTool === 'Wwwc' ? 'default' : 'ghost'}\n              className=\"w-full p-2 text-white hover:bg-gray-700\"\n              onClick={() => activateTool('Wwwc')}\n              data-testid=\"tool-window-level\"\n            >\n              <Contrast className=\"w-4 h-4\" />\n            </Button>\n            \n            <Button\n              size=\"sm\"\n              variant={activeTool === 'Pan' ? 'default' : 'ghost'}\n              className=\"w-full p-2 text-white hover:bg-gray-700\"\n              onClick={() => activateTool('Pan')}\n              data-testid=\"tool-pan\"\n            >\n              <Move className=\"w-4 h-4\" />\n            </Button>\n\n            <Button\n              size=\"sm\"\n              variant={activeTool === 'Zoom' ? 'default' : 'ghost'}\n              className=\"w-full p-2 text-white hover:bg-gray-700\"\n              onClick={() => activateTool('Zoom')}\n              data-testid=\"tool-zoom\"\n            >\n              <ZoomIn className=\"w-4 h-4\" />\n            </Button>\n\n            <Separator className=\"bg-gray-700\" />\n            \n            <div className=\"text-xs text-gray-400 mb-2\">Annotations</div>\n\n            <Button\n              size=\"sm\"\n              variant={activeTool === 'Length' ? 'default' : 'ghost'}\n              className=\"w-full p-2 text-white hover:bg-gray-700\"\n              onClick={() => activateTool('Length')}\n              data-testid=\"tool-length\"\n            >\n              <Ruler className=\"w-4 h-4\" />\n            </Button>\n\n            <Button\n              size=\"sm\"\n              variant={activeTool === 'RectangleRoi' ? 'default' : 'ghost'}\n              className=\"w-full p-2 text-white hover:bg-gray-700\"\n              onClick={() => activateTool('RectangleRoi')}\n              data-testid=\"tool-rectangle\"\n            >\n              <Square className=\"w-4 h-4\" />\n            </Button>\n\n            <Button\n              size=\"sm\"\n              variant={activeTool === 'EllipticalRoi' ? 'default' : 'ghost'}\n              className=\"w-full p-2 text-white hover:bg-gray-700\"\n              onClick={() => activateTool('EllipticalRoi')}\n              data-testid=\"tool-ellipse\"\n            >\n              <Circle className=\"w-4 h-4\" />\n            </Button>\n\n            <Button\n              size=\"sm\"\n              variant={activeTool === 'ArrowAnnotate' ? 'default' : 'ghost'}\n              className=\"w-full p-2 text-white hover:bg-gray-700\"\n              onClick={() => activateTool('ArrowAnnotate')}\n              data-testid=\"tool-annotate\"\n            >\n              <Type className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Main Viewer Area */}\n        <div className=\"flex-1 flex flex-col\">\n          {/* Viewer Controls */}\n          <div className=\"bg-gray-800 p-2 border-b border-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={zoomIn}\n                  className=\"text-white hover:bg-gray-700\"\n                  data-testid=\"button-zoom-in\"\n                >\n                  <ZoomIn className=\"w-4 h-4\" />\n                </Button>\n                \n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={zoomOut}\n                  className=\"text-white hover:bg-gray-700\"\n                  data-testid=\"button-zoom-out\"\n                >\n                  <ZoomOut className=\"w-4 h-4\" />\n                </Button>\n\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={resetView}\n                  className=\"text-white hover:bg-gray-700\"\n                  data-testid=\"button-reset\"\n                >\n                  <Home className=\"w-4 h-4\" />\n                </Button>\n\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={rotate}\n                  className=\"text-white hover:bg-gray-700\"\n                  data-testid=\"button-rotate\"\n                >\n                  <RotateCw className=\"w-4 h-4\" />\n                </Button>\n\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={toggleInvert}\n                  className=\"text-white hover:bg-gray-700\"\n                  data-testid=\"button-invert\"\n                >\n                  <RefreshCw className=\"w-4 h-4\" />\n                </Button>\n\n                <Separator orientation=\"vertical\" className=\"bg-gray-600 h-6\" />\n\n                {/* Multi-frame controls (if applicable) */}\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"text-white hover:bg-gray-700\"\n                  data-testid=\"button-prev-frame\"\n                >\n                  <SkipBack className=\"w-4 h-4\" />\n                </Button>\n\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => setIsPlaying(!isPlaying)}\n                  className=\"text-white hover:bg-gray-700\"\n                  data-testid=\"button-play-pause\"\n                >\n                  {isPlaying ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n                </Button>\n\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"text-white hover:bg-gray-700\"\n                  data-testid=\"button-next-frame\"\n                >\n                  <SkipForward className=\"w-4 h-4\" />\n                </Button>\n\n                <span className=\"text-xs text-gray-400\">\n                  {currentFrame} / {totalFrames}\n                </span>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={downloadImage}\n                  className=\"text-white hover:bg-gray-700\"\n                  data-testid=\"button-download\"\n                >\n                  <Download className=\"w-4 h-4\" />\n                </Button>\n\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"text-white hover:bg-gray-700\"\n                  data-testid=\"button-fullscreen\"\n                >\n                  <Maximize2 className=\"w-4 h-4\" />\n                </Button>\n\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"text-white hover:bg-gray-700\"\n                  data-testid=\"button-settings\"\n                >\n                  <Settings className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Image Viewport */}\n          <div className=\"flex-1 flex items-center justify-center bg-black relative\">\n            {isLoading && (\n              <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-75 z-10\">\n                <div className=\"flex flex-col items-center space-y-3 text-white\">\n                  <div className=\"w-8 h-8 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                  <span className=\"text-sm\">Loading image...</span>\n                </div>\n              </div>\n            )}\n            \n            {error && !isLoading && (\n              <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-75 z-10\">\n                <div className=\"flex flex-col items-center space-y-3 text-white max-w-md text-center\">\n                  <div className=\"w-12 h-12 rounded-full bg-red-600 flex items-center justify-center\">\n                    <span className=\"text-xl\">âš </span>\n                  </div>\n                  <h3 className=\"font-medium\">Failed to Load Image</h3>\n                  <p className=\"text-sm text-gray-300\">{error}</p>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => loadImage()}\n                    className=\"text-white border-white hover:bg-white hover:text-black\"\n                    data-testid=\"button-retry-image\"\n                  >\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Retry\n                  </Button>\n                </div>\n              </div>\n            )}\n            \n            <div\n              ref={viewportRef}\n              className=\"max-w-full max-h-full bg-black cursor-crosshair\"\n              style={{ minHeight: '400px', minWidth: '400px' }}\n              data-testid=\"image-viewport\"\n            />\n          </div>\n\n          {/* Status Bar */}\n          <div className=\"bg-gray-800 p-2 border-t border-gray-700\">\n            <div className=\"flex items-center justify-between text-xs text-gray-400\">\n              <div className=\"flex items-center space-x-4\">\n                <span>Active Tool: {activeTool}</span>\n                {imageData && (\n                  <>\n                    <span>Size: {imageData.width} x {imageData.height}</span>\n                    <span>Bits: {imageData.color ? '24' : '8'}</span>\n                  </>\n                )}\n              </div>\n              <div>\n                <span>{isLoading ? 'Loading...' : error ? 'Error' : 'Ready'}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":22701},"client/src/components/NotificationDropdown.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n  DropdownMenuLabel\n} from \"@/components/ui/dropdown-menu\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Bell, \n  User, \n  Calendar, \n  Eye,\n  Settings,\n  ExternalLink\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\n\ninterface Notification {\n  id: string;\n  userId: string;\n  type: string;\n  title: string;\n  message: string;\n  isRead: boolean;\n  relatedId?: string;\n  createdAt: string;\n  createdBy?: string;\n}\n\nexport default function NotificationDropdown() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { data: notifications = [] } = useQuery({\n    queryKey: [\"/api/notifications\"],\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: (notificationId: string) => \n      fetch(`/api/notifications/${notificationId}/read`, { method: 'PUT' }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n    }\n  });\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'patient_added':\n      case 'patient_updated':\n        return <User className=\"w-3 h-3 text-blue-600\" />;\n      default:\n        return <Bell className=\"w-3 h-3 text-gray-600\" />;\n    }\n  };\n\n  const handleNotificationClick = (notification: Notification) => {\n    if (!notification.isRead) {\n      markAsReadMutation.mutate(notification.id);\n    }\n    \n    // Navigate to relevant page based on type\n    if (notification.relatedId) {\n      switch (notification.type) {\n        case 'patient_added':\n        case 'patient_updated':\n          setLocation(`/patients/${notification.relatedId}`);\n          break;\n      }\n    }\n    setIsOpen(false);\n  };\n\n  const unreadNotifications = (notifications as Notification[]).filter((n: Notification) => !n.isRead);\n  const recentNotifications = (notifications as Notification[]).slice(0, 5);\n\n  return (\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"relative\"\n          data-testid=\"button-notifications-dropdown\"\n        >\n          <Bell className=\"h-5 w-5\" />\n          {unreadNotifications.length > 0 && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 text-xs flex items-center justify-center\"\n            >\n              {unreadNotifications.length > 9 ? '9+' : unreadNotifications.length}\n            </Badge>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      \n      <DropdownMenuContent align=\"end\" className=\"w-80\">\n        <DropdownMenuLabel className=\"flex items-center justify-between\">\n          <span>Notifications</span>\n          {unreadNotifications.length > 0 && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {unreadNotifications.length} new\n            </Badge>\n          )}\n        </DropdownMenuLabel>\n        \n        <DropdownMenuSeparator />\n        \n        <ScrollArea className=\"max-h-80\">\n          {recentNotifications.length === 0 ? (\n            <div className=\"p-4 text-center text-sm text-gray-500\">\n              <Bell className=\"w-8 h-8 text-gray-300 mx-auto mb-2\" />\n              No notifications\n            </div>\n          ) : (\n            recentNotifications.map((notification: Notification) => (\n              <DropdownMenuItem\n                key={notification.id}\n                className={`p-3 cursor-pointer focus:bg-gray-50 ${\n                  !notification.isRead ? 'bg-blue-50/50' : ''\n                }`}\n                onClick={() => handleNotificationClick(notification)}\n                data-testid={`dropdown-notification-${notification.id}`}\n              >\n                <div className=\"flex items-start space-x-3 w-full\">\n                  <div className=\"flex-shrink-0 mt-0.5\">\n                    {getNotificationIcon(notification.type)}\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <p className={`text-sm font-medium truncate ${\n                        !notification.isRead ? 'text-gray-900' : 'text-gray-700'\n                      }`}>\n                        {notification.title}\n                      </p>\n                      {!notification.isRead && (\n                        <div className=\"w-1.5 h-1.5 bg-blue-600 rounded-full flex-shrink-0\" />\n                      )}\n                    </div>\n                    \n                    <p className=\"text-xs text-gray-600 line-clamp-2 mb-1\">\n                      {notification.message}\n                    </p>\n                    \n                    <div className=\"flex items-center text-xs text-gray-500\">\n                      <Calendar className=\"w-3 h-3 mr-1\" />\n                      {formatDistanceToNow(new Date(notification.createdAt))} ago\n                    </div>\n                  </div>\n                </div>\n              </DropdownMenuItem>\n            ))\n          )}\n        </ScrollArea>\n        \n        <DropdownMenuSeparator />\n        \n        <DropdownMenuItem \n          className=\"text-center justify-center\"\n          onClick={() => {\n            setLocation('/notifications');\n            setIsOpen(false);\n          }}\n          data-testid=\"dropdown-view-all-notifications\"\n        >\n          <ExternalLink className=\"w-4 h-4 mr-2\" />\n          View All Notifications\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":6085},"client/src/pages/Notifications.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Bell, \n  Mail, \n  User, \n  Calendar, \n  CheckCheck, \n  Eye,\n  Settings,\n  Filter,\n  MoreVertical\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger\n} from \"@/components/ui/dropdown-menu\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue \n} from \"@/components/ui/select\";\n\ninterface Notification {\n  id: string;\n  userId: string;\n  type: string;\n  title: string;\n  message: string;\n  isRead: boolean;\n  relatedId?: string;\n  createdAt: string;\n  createdBy?: string;\n}\n\nexport default function NotificationsPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [filter, setFilter] = useState(\"all\");\n\n  const { data: notifications = [], isLoading } = useQuery({\n    queryKey: [\"/api/notifications\"],\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: (notificationId: string) => \n      fetch(`/api/notifications/${notificationId}/read`, { method: 'PUT' }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n      toast({ title: \"Notification marked as read\" });\n    }\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const unreadNotifications = (notifications as Notification[]).filter((n: Notification) => !n.isRead);\n      await Promise.all(\n        unreadNotifications.map((n: Notification) => \n          fetch(`/api/notifications/${n.id}/read`, { method: 'PUT' })\n        )\n      );\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n      toast({ title: \"All notifications marked as read\" });\n    }\n  });\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'patient_added':\n        return <User className=\"w-4 h-4 text-green-600\" />;\n      case 'patient_updated':\n        return <User className=\"w-4 h-4 text-blue-600\" />;\n      case 'file_uploaded':\n        return <Mail className=\"w-4 h-4 text-purple-600\" />;\n      default:\n        return <Bell className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getNotificationBadgeColor = (type: string) => {\n    switch (type) {\n      case 'patient_added':\n        return 'bg-green-100 text-green-800';\n      case 'patient_updated':\n        return 'bg-blue-100 text-blue-800';\n      case 'file_uploaded':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const handleNotificationClick = (notification: Notification) => {\n    if (!notification.isRead) {\n      markAsReadMutation.mutate(notification.id);\n    }\n    \n    // Navigate to relevant page based on type\n    if (notification.relatedId) {\n      switch (notification.type) {\n        case 'patient_added':\n        case 'patient_updated':\n          setLocation(`/patients/${notification.relatedId}`);\n          break;\n      }\n    }\n  };\n\n  const filteredNotifications = (notifications as Notification[]).filter((notification: Notification) => {\n    if (filter === \"unread\") return !notification.isRead;\n    if (filter === \"read\") return notification.isRead;\n    return true;\n  });\n\n  const unreadCount = (notifications as Notification[]).filter((n: Notification) => !n.isRead).length;\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"h-20 bg-gray-200 rounded-lg\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 flex items-center space-x-3\">\n              <Bell className=\"w-8 h-8 text-blue-600\" />\n              <span>Notifications</span>\n            </h1>\n            <p className=\"text-gray-600 mt-1\">\n              Stay updated with your clinic activities\n            </p>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Badge variant=\"secondary\" className=\"px-3 py-1\">\n              {unreadCount} unread\n            </Badge>\n            \n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => markAllAsReadMutation.mutate()}\n              disabled={unreadCount === 0 || markAllAsReadMutation.isPending}\n              data-testid=\"button-mark-all-read\"\n            >\n              <CheckCheck className=\"w-4 h-4 mr-2\" />\n              Mark All Read\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters and Actions */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Filter className=\"w-4 h-4 text-gray-500\" />\n                <span className=\"text-sm font-medium\">Filter:</span>\n              </div>\n              \n              <Select value={filter} onValueChange={setFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-notification-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All</SelectItem>\n                  <SelectItem value=\"unread\">Unread</SelectItem>\n                  <SelectItem value=\"read\">Read</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => setLocation('/settings')}\n              data-testid=\"button-notification-settings\"\n            >\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Settings\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Email Notification Demo */}\n      <Card className=\"mb-6 border-blue-200 bg-blue-50/30\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-lg text-blue-900 flex items-center space-x-2\">\n            <Mail className=\"w-5 h-5\" />\n            <span>Email Notifications</span>\n          </CardTitle>\n          <p className=\"text-sm text-blue-700\">\n            Email notifications are sent automatically when patients are added or updated\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"bg-white p-4 rounded-lg border border-blue-200\">\n            <h4 className=\"font-semibold text-gray-900 mb-2\">Sample Email Preview:</h4>\n            <div className=\"bg-gray-50 p-4 rounded border text-sm\">\n              <div className=\"font-bold text-blue-600 text-lg mb-2\">My Clinic Portal Notification</div>\n              <p className=\"mb-2\">Hello Doctor,</p>\n              <p className=\"mb-3\">Patient <strong>John Smith</strong> has been added in the clinic portal.</p>\n              <div className=\"mb-3\">\n                <span className=\"bg-blue-600 text-white px-4 py-2 rounded text-sm\">\n                  View Patient Details\n                </span>\n              </div>\n              <p className=\"text-gray-600\">\n                Best regards,<br />\n                My Clinic Portal Team\n              </p>\n            </div>\n          </div>\n          <div className=\"text-sm text-blue-600 flex items-center space-x-1\">\n            <Settings className=\"w-4 h-4\" />\n            <span>You can enable/disable email notifications in your user settings</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Notifications List */}\n      <div className=\"space-y-4\">\n        {filteredNotifications.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <Bell className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No notifications</h3>\n              <p className=\"text-gray-600\">\n                {filter === \"unread\" ? \"No unread notifications\" : \"No notifications to show\"}\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredNotifications.map((notification: Notification) => (\n            <Card \n              key={notification.id}\n              className={`cursor-pointer transition-all hover:shadow-md ${\n                !notification.isRead ? 'ring-2 ring-blue-100 bg-blue-50/20' : ''\n              }`}\n              onClick={() => handleNotificationClick(notification)}\n              data-testid={`notification-item-${notification.id}`}\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  {/* Icon */}\n                  <div className=\"flex-shrink-0 mt-1\">\n                    {getNotificationIcon(notification.type)}\n                  </div>\n                  \n                  {/* Content */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <h3 className={`font-semibold ${!notification.isRead ? 'text-gray-900' : 'text-gray-700'}`}>\n                            {notification.title}\n                          </h3>\n                          <Badge \n                            variant=\"secondary\" \n                            className={`text-xs ${getNotificationBadgeColor(notification.type)}`}\n                          >\n                            {notification.type.replace('_', ' ').toUpperCase()}\n                          </Badge>\n                          {!notification.isRead && (\n                            <div className=\"w-2 h-2 bg-blue-600 rounded-full\" />\n                          )}\n                        </div>\n                        <p className={`text-sm ${!notification.isRead ? 'text-gray-700' : 'text-gray-600'}`}>\n                          {notification.message}\n                        </p>\n                        <div className=\"flex items-center space-x-4 mt-2 text-xs text-gray-500\">\n                          <span className=\"flex items-center space-x-1\">\n                            <Calendar className=\"w-3 h-3\" />\n                            <span>{formatDistanceToNow(new Date(notification.createdAt))} ago</span>\n                          </span>\n                          {notification.isRead && (\n                            <span className=\"flex items-center space-x-1\">\n                              <CheckCheck className=\"w-3 h-3\" />\n                              <span>Read</span>\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      \n                      {/* Actions */}\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreVertical className=\"w-4 h-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          {!notification.isRead && (\n                            <DropdownMenuItem \n                              onClick={(e) => {\n                                e.stopPropagation();\n                                markAsReadMutation.mutate(notification.id);\n                              }}\n                            >\n                              <Eye className=\"w-4 h-4 mr-2\" />\n                              Mark as Read\n                            </DropdownMenuItem>\n                          )}\n                          {notification.relatedId && (\n                            <DropdownMenuItem \n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleNotificationClick(notification);\n                              }}\n                            >\n                              <User className=\"w-4 h-4 mr-2\" />\n                              View Patient\n                            </DropdownMenuItem>\n                          )}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":13282}},"version":1}